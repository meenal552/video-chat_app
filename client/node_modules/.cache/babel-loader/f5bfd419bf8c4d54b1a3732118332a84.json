{"ast":null,"code":"import React, { Component } from \"react\";\nimport io from \"socket.io-client\";\nimport Peer from \"peerjs\";\n\nconst initializePeerConnection = () => {\n  const myPeer = new Peer(undefined, {\n    host: \"/\",\n    port: \"3008\"\n  });\n  return myPeer;\n};\n\nconst initializeSocketConnection = async () => {\n  const newsocket = io.connect(\"http://localhost:4000\", {\n    query: {\n      roomId: this.props.match.params.id\n    }\n  });\n  return newsocket;\n};\n\nclass Connection {\n  constructor(props) {\n    this.videoContainer = {};\n    this.message = [];\n    this.streaming = false;\n    this.myID = \"\";\n\n    this.initializeSocketEvents = () => {\n      this.socket.on(\"connect\", () => {\n        console.log(\"socket connected\");\n      });\n      this.socket.on(\"user-disconnected\", userID => {\n        console.log(\"user disconnected-- closing peers\", userID);\n        this.peers[userID] && this.peers[userID].close();\n        this.removeVideo(userID);\n      });\n      this.socket.on(\"disconnect\", () => {\n        console.log(\"socket disconnected --\");\n      });\n      this.socket.on(\"error\", err => {\n        console.log(\"socket error --\", err);\n      });\n    };\n\n    this.initializePeersEvents = () => {\n      this.myPeer.on(\"open\", id => {\n        this.myID = id;\n        const roomID = window.location.pathname.split(\"/\")[2];\n        const userData = {\n          userID: id,\n          roomID\n        };\n        console.log(\"peers established and joined room\", userData);\n        this.socket.emit(\"join-room\", userData);\n        this.setNavigatorToStream();\n      });\n      this.myPeer.on(\"error\", err => {\n        console.log(\"peer connection error\", err);\n        this.myPeer.reconnect();\n      });\n    };\n\n    this.setNavigatorToStream = () => {\n      this.getVideoAudioStream().then(stream => {\n        if (stream) {\n          this.streaming = true;\n          this.createVideo({\n            id: this.myID,\n            stream\n          });\n          this.setPeersListeners(stream);\n          this.newUserConnection(stream);\n        }\n      });\n    };\n\n    this.getVideoAudioStream = (video = true, audio = true) => {\n      // let quality = this.settings.params?.quality;\n      // if (quality) quality = parseInt(quality);\n      const myNavigator = navigator.mediaDevices.getUserMedia || navigator.mediaDevices.webkitGetUserMedia || navigator.mediaDevices.mozGetUserMedia || navigator.mediaDevices.msGetUserMedia;\n      return myNavigator({\n        video: video ? {\n          frameRate: 12,\n          noiseSuppression: true,\n          width: {\n            min: 640,\n            ideal: 1280,\n            max: 1920\n          },\n          height: {\n            min: 480,\n            ideal: 720,\n            max: 1080\n          }\n        } : false,\n        audio: audio\n      });\n    };\n\n    this.createVideo = createObj => {\n      if (!this.videoContainer[createObj.id]) {\n        this.videoContainer[createObj.id] = { ...createObj\n        };\n        const roomContainer = document.getElementById(\"room-container\");\n        const videoContainer = document.createElement(\"div\");\n        const video = document.createElement(\"video\");\n        video.srcObject = this.videoContainer[createObj.id].stream;\n        video.id = createObj.id;\n        video.autoplay = true;\n        if (this.myID === createObj.id) video.muted = true;\n        videoContainer.appendChild(video);\n        roomContainer.append(videoContainer);\n      } else {// @ts-ignore\n        //document.getElementById(createObj.id)?.srcObject = createObj.stream;\n      }\n    };\n\n    this.setPeersListeners = stream => {\n      this.myPeer.on(\"call\", call => {\n        call.answer(stream);\n        call.on(\"stream\", userVideoStream => {\n          console.log(\"user stream data\", userVideoStream);\n          this.createVideo({\n            id: call.metadata.id,\n            stream: userVideoStream\n          });\n        });\n        call.on(\"close\", () => {\n          console.log(\"closing peers listeners\", call.metadata.id);\n          this.removeVideo(call.metadata.id);\n        });\n        call.on(\"error\", () => {\n          console.log(\"peer error ------\");\n          this.removeVideo(call.metadata.id);\n        });\n        this.peers[call.metadata.id] = call;\n      });\n    };\n\n    this.newUserConnection = stream => {\n      this.socket.on(\"new-user-connect\", userData => {\n        console.log(\"New User Connected\", userData);\n        this.connectToNewUser(userData, stream);\n      });\n    };\n\n    this.removeVideo = id => {\n      delete this.videoContainer[id];\n      const video = document.getElementById(id);\n      if (video) video.remove();\n    };\n\n    this.destoryConnection = () => {\n      var _this$videoContainer$, _this$socket;\n\n      const myMediaTracks = (_this$videoContainer$ = this.videoContainer[this.myID]) === null || _this$videoContainer$ === void 0 ? void 0 : _this$videoContainer$.stream.getTracks();\n      myMediaTracks === null || myMediaTracks === void 0 ? void 0 : myMediaTracks.forEach(track => {\n        track.stop();\n      });\n      (_this$socket = this.socket) === null || _this$socket === void 0 ? void 0 : _this$socket.socket.disconnect();\n      this.myPeer.destroy();\n    };\n\n    // this.settings = settings;\n    this.myPeer = initializePeerConnection();\n    this.socket = initializeSocketConnection();\n    this.initializeSocketEvents();\n    this.initializePeersEvents();\n  }\n\n  connectToNewUser(userData, stream) {\n    const {\n      userID\n    } = userData;\n    const call = this.myPeer.call(userID, stream, {\n      metadata: {\n        id: this.myID\n      }\n    });\n    call.on(\"stream\", userVideoStream => {\n      this.createVideo({\n        id: userID,\n        stream: userVideoStream,\n        userData\n      });\n    });\n    call.on(\"close\", () => {\n      console.log(\"closing new user\", userID);\n      this.removeVideo(userID);\n    });\n    call.on(\"error\", () => {\n      console.log(\"peer error ------\");\n      this.removeVideo(userID);\n    });\n    this.peers[userID] = call;\n  }\n\n}\n\nexport default function Videochatroom(props) {\n  //console.log(\"props\" + this.props.match.params.id);\n  return new Connection(props);\n}\n_c = Videochatroom;\n\nvar _c;\n\n$RefreshReg$(_c, \"Videochatroom\");","map":{"version":3,"sources":["E:/video_project/client/src/Components/Videochatroom.js"],"names":["React","Component","io","Peer","initializePeerConnection","myPeer","undefined","host","port","initializeSocketConnection","newsocket","connect","query","roomId","props","match","params","id","Connection","constructor","videoContainer","message","streaming","myID","initializeSocketEvents","socket","on","console","log","userID","peers","close","removeVideo","err","initializePeersEvents","roomID","window","location","pathname","split","userData","emit","setNavigatorToStream","reconnect","getVideoAudioStream","then","stream","createVideo","setPeersListeners","newUserConnection","video","audio","myNavigator","navigator","mediaDevices","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","frameRate","noiseSuppression","width","min","ideal","max","height","createObj","roomContainer","document","getElementById","createElement","srcObject","autoplay","muted","appendChild","append","call","answer","userVideoStream","metadata","connectToNewUser","remove","destoryConnection","myMediaTracks","getTracks","forEach","track","stop","disconnect","destroy","Videochatroom"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport Peer from \"peerjs\";\r\n\r\nconst initializePeerConnection = () => {\r\n  const myPeer = new Peer(undefined, {\r\n    host: \"/\",\r\n    port: \"3008\",\r\n  });\r\n  return myPeer;\r\n};\r\n\r\nconst initializeSocketConnection = async () => {\r\n  const newsocket = io.connect(\"http://localhost:4000\", {\r\n    query: {\r\n      roomId: this.props.match.params.id,\r\n    },\r\n  });\r\n  return newsocket;\r\n};\r\n\r\nclass Connection {\r\n  videoContainer = {};\r\n  message = [];\r\n  settings;\r\n  streaming = false;\r\n  myPeer;\r\n  socket;\r\n  peers;\r\n  myID = \"\";\r\n  constructor(props) {\r\n    // this.settings = settings;\r\n    this.myPeer = initializePeerConnection();\r\n    this.socket = initializeSocketConnection();\r\n    this.initializeSocketEvents();\r\n    this.initializePeersEvents();\r\n  }\r\n\r\n  initializeSocketEvents = () => {\r\n    this.socket.on(\"connect\", () => {\r\n      console.log(\"socket connected\");\r\n    });\r\n    this.socket.on(\"user-disconnected\", (userID) => {\r\n      console.log(\"user disconnected-- closing peers\", userID);\r\n      this.peers[userID] && this.peers[userID].close();\r\n      this.removeVideo(userID);\r\n    });\r\n    this.socket.on(\"disconnect\", () => {\r\n      console.log(\"socket disconnected --\");\r\n    });\r\n    this.socket.on(\"error\", (err) => {\r\n      console.log(\"socket error --\", err);\r\n    });\r\n  };\r\n  initializePeersEvents = () => {\r\n    this.myPeer.on(\"open\", (id) => {\r\n      this.myID = id;\r\n      const roomID = window.location.pathname.split(\"/\")[2];\r\n      const userData = {\r\n        userID: id,\r\n        roomID,\r\n      };\r\n      console.log(\"peers established and joined room\", userData);\r\n      this.socket.emit(\"join-room\", userData);\r\n      this.setNavigatorToStream();\r\n    });\r\n    this.myPeer.on(\"error\", (err) => {\r\n      console.log(\"peer connection error\", err);\r\n      this.myPeer.reconnect();\r\n    });\r\n  };\r\n  setNavigatorToStream = () => {\r\n    this.getVideoAudioStream().then((stream) => {\r\n      if (stream) {\r\n        this.streaming = true;\r\n        this.createVideo({ id: this.myID, stream });\r\n        this.setPeersListeners(stream);\r\n        this.newUserConnection(stream);\r\n      }\r\n    });\r\n  };\r\n  getVideoAudioStream = (video = true, audio = true) => {\r\n    // let quality = this.settings.params?.quality;\r\n    // if (quality) quality = parseInt(quality);\r\n    const myNavigator =\r\n      navigator.mediaDevices.getUserMedia ||\r\n      navigator.mediaDevices.webkitGetUserMedia ||\r\n      navigator.mediaDevices.mozGetUserMedia ||\r\n      navigator.mediaDevices.msGetUserMedia;\r\n    return myNavigator({\r\n      video: video\r\n        ? {\r\n            frameRate: 12,\r\n            noiseSuppression: true,\r\n            width: { min: 640, ideal: 1280, max: 1920 },\r\n            height: { min: 480, ideal: 720, max: 1080 },\r\n          }\r\n        : false,\r\n      audio: audio,\r\n    });\r\n  };\r\n  createVideo = (createObj) => {\r\n    if (!this.videoContainer[createObj.id]) {\r\n      this.videoContainer[createObj.id] = {\r\n        ...createObj,\r\n      };\r\n      const roomContainer = document.getElementById(\"room-container\");\r\n      const videoContainer = document.createElement(\"div\");\r\n      const video = document.createElement(\"video\");\r\n      video.srcObject = this.videoContainer[createObj.id].stream;\r\n      video.id = createObj.id;\r\n      video.autoplay = true;\r\n      if (this.myID === createObj.id) video.muted = true;\r\n      videoContainer.appendChild(video);\r\n      roomContainer.append(videoContainer);\r\n    } else {\r\n      // @ts-ignore\r\n      //document.getElementById(createObj.id)?.srcObject = createObj.stream;\r\n    }\r\n  };\r\n  setPeersListeners = (stream) => {\r\n    this.myPeer.on(\"call\", (call) => {\r\n      call.answer(stream);\r\n      call.on(\"stream\", (userVideoStream) => {\r\n        console.log(\"user stream data\", userVideoStream);\r\n        this.createVideo({ id: call.metadata.id, stream: userVideoStream });\r\n      });\r\n      call.on(\"close\", () => {\r\n        console.log(\"closing peers listeners\", call.metadata.id);\r\n        this.removeVideo(call.metadata.id);\r\n      });\r\n      call.on(\"error\", () => {\r\n        console.log(\"peer error ------\");\r\n        this.removeVideo(call.metadata.id);\r\n      });\r\n      this.peers[call.metadata.id] = call;\r\n    });\r\n  };\r\n  newUserConnection = (stream) => {\r\n    this.socket.on(\"new-user-connect\", (userData) => {\r\n      console.log(\"New User Connected\", userData);\r\n      this.connectToNewUser(userData, stream);\r\n    });\r\n  };\r\n  connectToNewUser(userData, stream) {\r\n    const { userID } = userData;\r\n    const call = this.myPeer.call(userID, stream, {\r\n      metadata: { id: this.myID },\r\n    });\r\n    call.on(\"stream\", (userVideoStream) => {\r\n      this.createVideo({ id: userID, stream: userVideoStream, userData });\r\n    });\r\n    call.on(\"close\", () => {\r\n      console.log(\"closing new user\", userID);\r\n      this.removeVideo(userID);\r\n    });\r\n    call.on(\"error\", () => {\r\n      console.log(\"peer error ------\");\r\n      this.removeVideo(userID);\r\n    });\r\n    this.peers[userID] = call;\r\n  }\r\n  removeVideo = (id) => {\r\n    delete this.videoContainer[id];\r\n    const video = document.getElementById(id);\r\n    if (video) video.remove();\r\n  };\r\n  destoryConnection = () => {\r\n    const myMediaTracks = this.videoContainer[this.myID]?.stream.getTracks();\r\n    myMediaTracks?.forEach((track: any) => {\r\n      track.stop();\r\n    });\r\n    this.socket?.socket.disconnect();\r\n    this.myPeer.destroy();\r\n  };\r\n}\r\nexport default function Videochatroom(props) {\r\n  //console.log(\"props\" + this.props.match.params.id);\r\n\r\n  return new Connection(props);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}