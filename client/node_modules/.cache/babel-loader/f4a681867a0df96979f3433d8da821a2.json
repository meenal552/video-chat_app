{"ast":null,"code":"var _jsxFileName = \"E:\\\\video_project\\\\client\\\\src\\\\Components\\\\Videochatroom.js\";\nimport React, { useState, useEffect, Component } from \"react\";\nimport { io } from \"socket.io-client\";\nimport { withRouter } from \"react-router-dom\";\nimport Peer from \"peerjs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst initializePeerConnection = () => {\n  const myPeer = new Peer(undefined, {\n    host: \"/\",\n    port: \"3008\"\n  });\n  return myPeer;\n};\n\nconst initializeSocketConnection = async () => {\n  const newsocket = io.connect(\"http://localhost:4000\", {\n    query: {\n      roomId: this.props.match.params.id\n    }\n  });\n  return newsocket;\n};\n\nexport default class Videochatroom extends Component {\n  constructor(props) {\n    super(props);\n\n    this.initializeSocketEvents = () => {};\n\n    this.initializePeersEvents = () => {\n      this.myPeer.on(\"open\", id => {\n        console.log(\"user id send to join room \" + id);\n        this.socket.emit(\"join-room\", id);\n        this.setNavigatorToStream();\n      });\n    };\n\n    this.setNavigatorToStream = () => {\n      navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      }).then(stream => {\n        if (stream) {\n          this.createVideo({\n            id: this.myID,\n            stream\n          });\n          this.setPeersListeners(stream);\n          this.newUserConnection(stream);\n        }\n      });\n    };\n\n    this.setPeersListeners = stream => {\n      this.myPeer.on(\"call\", call => {\n        console.log(\"someone calling\");\n        call.answer(stream);\n        const video = document.createElement(\"video\");\n        console.log(\"call.peer \" + call.peer);\n        video.id = call.peer;\n        call.on(\"stream\", userVideoStream => {\n          addVideoStream(video, userVideoStream);\n        });\n        call.on(\"close\", () => {\n          myVideo.remove();\n        });\n      });\n    };\n\n    this.newUserConnection = stream => {\n      this.socket.on(\"new-user-connect\", userData => {\n        console.log(\"New User Connected\", userData);\n        this.connectToNewUser(userData, stream);\n      });\n    };\n\n    this.myPeer = initializePeerConnection();\n    this.socket = initializeSocketConnection();\n    this.initializeSocketEvents();\n    this.initializePeersEvents();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"video-grid\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"video chat room\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n          id: \"myvideo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"pause\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["E:/video_project/client/src/Components/Videochatroom.js"],"names":["React","useState","useEffect","Component","io","withRouter","Peer","initializePeerConnection","myPeer","undefined","host","port","initializeSocketConnection","newsocket","connect","query","roomId","props","match","params","id","Videochatroom","constructor","initializeSocketEvents","initializePeersEvents","on","console","log","socket","emit","setNavigatorToStream","navigator","mediaDevices","getUserMedia","video","audio","then","stream","createVideo","myID","setPeersListeners","newUserConnection","call","answer","document","createElement","peer","userVideoStream","addVideoStream","myVideo","remove","userData","connectToNewUser","render"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Component } from \"react\";\r\nimport { io } from \"socket.io-client\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport Peer from \"peerjs\";\r\n\r\nconst initializePeerConnection = () => {\r\n  const myPeer = new Peer(undefined, {\r\n    host: \"/\",\r\n    port: \"3008\",\r\n  });\r\n  return myPeer;\r\n};\r\n\r\nconst initializeSocketConnection = async () => {\r\n  const newsocket = io.connect(\"http://localhost:4000\", {\r\n    query: {\r\n      roomId: this.props.match.params.id,\r\n    },\r\n  });\r\n  return newsocket;\r\n};\r\n\r\nexport default class Videochatroom extends Component {\r\n  myPeer;\r\n  socket;\r\n  peers;\r\n  constructor(props) {\r\n    super(props);\r\n    this.myPeer = initializePeerConnection();\r\n    this.socket = initializeSocketConnection();\r\n    this.initializeSocketEvents();\r\n    this.initializePeersEvents();\r\n  }\r\n  initializeSocketEvents = () => {};\r\n  initializePeersEvents = () => {\r\n    this.myPeer.on(\"open\", (id) => {\r\n      console.log(\"user id send to join room \" + id);\r\n      this.socket.emit(\"join-room\", id);\r\n      this.setNavigatorToStream();\r\n    });\r\n  };\r\n  setNavigatorToStream = () => {\r\n    navigator.mediaDevices\r\n      .getUserMedia({\r\n        video: true,\r\n        audio: true,\r\n      })\r\n      .then((stream) => {\r\n        if (stream) {\r\n          this.createVideo({ id: this.myID, stream });\r\n          this.setPeersListeners(stream);\r\n          this.newUserConnection(stream);\r\n        }\r\n      });\r\n  };\r\n  setPeersListeners = (stream) => {\r\n    this.myPeer.on(\"call\", (call) => {\r\n      console.log(\"someone calling\");\r\n\r\n      call.answer(stream);\r\n      const video = document.createElement(\"video\");\r\n      console.log(\"call.peer \" + call.peer);\r\n      video.id = call.peer;\r\n\r\n      call.on(\"stream\", (userVideoStream) => {\r\n        addVideoStream(video, userVideoStream);\r\n      });\r\n\r\n      call.on(\"close\", () => {\r\n        myVideo.remove();\r\n      });\r\n    });\r\n  };\r\n  newUserConnection = (stream) => {\r\n    this.socket.on(\"new-user-connect\", (userData) => {\r\n      console.log(\"New User Connected\", userData);\r\n      this.connectToNewUser(userData, stream);\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div id=\"video-grid\">\r\n          <p>video chat room</p>\r\n          <video id=\"myvideo\" />\r\n          <button>pause</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}