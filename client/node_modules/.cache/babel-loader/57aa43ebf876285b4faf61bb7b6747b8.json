{"ast":null,"code":"var _jsxFileName = \"E:\\\\video_project\\\\client\\\\src\\\\Components\\\\Videochatroom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { io } from \"socket.io-client\";\nimport { withRouter } from \"react-router-dom\"; //import createSocketConnectionInstance from \"./Connection\"\n\nimport Peer from \"peerjs\"; //import { validate as uuidValidate } from \"uuid\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Videochatroom = props => {\n  _s();\n\n  // let socketInstance = useRef(null);\n  const [socket, setSocket] = useState(null);\n  const [peers, addpeers] = useState({});\n  const [mystream, setstream] = useState(null);\n  const myPeer = new Peer(undefined, {\n    host: \"/\",\n    port: \"3001\"\n  });\n\n  const chatroom = async () => {\n    const newsocket = io.connect(\"http://localhost:4000\", {\n      query: {\n        roomId: props.match.params.id\n      }\n    });\n    setSocket(newsocket);\n    myPeer.on(\"call\", call => {\n      console.log(\"someone calling\");\n      call.answer(mystream);\n      const video = document.createElement(\"video\");\n      call.on(\"stream\", userVideoStream => {\n        addVideoStream(video, userVideoStream);\n      });\n    });\n    newsocket.on(\"user-connected\", userId => {\n      console.log(\"user id received of new user\" + userId);\n      connectToNewUser(userId, mystream);\n    });\n    newsocket.on(\"user-disconnected\", userId => {\n      if (peers[userId]) peers[userId].close();\n    });\n    myPeer.on(\"open\", id => {\n      console.log(\"user id send to join room \" + id);\n      newsocket.emit(\"join-room\", id);\n    });\n  };\n\n  const connectToNewUser = (userId, stream) => {\n    console.log(\"connecting to newuser! \");\n    const call = myPeer.call(userId, stream); // adding peers\n\n    console.log(\"peers adding \"); // addpeers((prevstate) => ({\n    //   ...prevstate,\n    //   [userId]: call,\n    // }));\n\n    const updatedValue = {};\n    updatedValue[userId] = call;\n    addpeers({ ...peers,\n      ...updatedValue\n    });\n    console.log(\"peers \", peers[userId]);\n    const video = document.createElement(\"video\");\n    call.on(\"stream\", userVideoStream => {\n      console.log(\"streaming \");\n      addVideoStream(video, userVideoStream);\n    });\n    call.on(\"close\", () => {\n      video.remove();\n    }); //peers[userId] = call;\n  };\n\n  const addVideoStream = (video, stream) => {\n    console.log(\"adding video stream\");\n    const videoGrid = document.getElementById(\"video-grid\");\n    video.srcObject = stream;\n    video.addEventListener(\"loadedmetadata\", () => {\n      video.play();\n    });\n    videoGrid.append(video);\n    console.log(\":appending\");\n  };\n\n  useEffect(() => {\n    console.log(props.match.params.id);\n    console.log(\"mount it using useEffect!\");\n    const myVideo = document.createElement(\"video\");\n    myVideo.muted = true;\n    console.log(\"alright now \");\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      setstream(stream);\n      addVideoStream(myVideo, stream);\n    });\n  }, [peers]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"video-grid\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"video chat room\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      children: \"Start streaming\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), this.chatroom]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Videochatroom, \"0Hn6RZ9/iKqyO/rZGvvOvXf1Sos=\");\n\n_c = Videochatroom;\nexport default _c2 = withRouter(Videochatroom);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Videochatroom\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["E:/video_project/client/src/Components/Videochatroom.js"],"names":["React","useState","useEffect","io","withRouter","Peer","Videochatroom","props","socket","setSocket","peers","addpeers","mystream","setstream","myPeer","undefined","host","port","chatroom","newsocket","connect","query","roomId","match","params","id","on","call","console","log","answer","video","document","createElement","userVideoStream","addVideoStream","userId","connectToNewUser","close","emit","stream","updatedValue","remove","videoGrid","getElementById","srcObject","addEventListener","play","append","myVideo","muted","navigator","mediaDevices","getUserMedia","audio","then"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { io } from \"socket.io-client\";\r\nimport { withRouter } from \"react-router-dom\";\r\n//import createSocketConnectionInstance from \"./Connection\"\r\nimport Peer from \"peerjs\";\r\n//import { validate as uuidValidate } from \"uuid\";\r\n\r\nconst Videochatroom = (props) => {\r\n  // let socketInstance = useRef(null);\r\n  const [socket, setSocket] = useState(null);\r\n  const [peers, addpeers] = useState({});\r\n  const [mystream, setstream] = useState(null);\r\n\r\n  const myPeer = new Peer(undefined, {\r\n    host: \"/\",\r\n    port: \"3001\",\r\n  });\r\n  const chatroom = async () => {\r\n    const newsocket = io.connect(\"http://localhost:4000\", {\r\n      query: {\r\n        roomId: props.match.params.id,\r\n      },\r\n    });\r\n    setSocket(newsocket);\r\n\r\n    myPeer.on(\"call\", (call) => {\r\n      console.log(\"someone calling\");\r\n      call.answer(mystream);\r\n      const video = document.createElement(\"video\");\r\n      call.on(\"stream\", (userVideoStream) => {\r\n        addVideoStream(video, userVideoStream);\r\n      });\r\n    });\r\n    newsocket.on(\"user-connected\", (userId) => {\r\n      console.log(\"user id received of new user\" + userId);\r\n      connectToNewUser(userId, mystream);\r\n    });\r\n    newsocket.on(\"user-disconnected\", (userId) => {\r\n      if (peers[userId]) peers[userId].close();\r\n    });\r\n\r\n    myPeer.on(\"open\", (id) => {\r\n      console.log(\"user id send to join room \" + id);\r\n      newsocket.emit(\"join-room\", id);\r\n    });\r\n  };\r\n\r\n  const connectToNewUser = (userId, stream) => {\r\n    console.log(\"connecting to newuser! \");\r\n\r\n    const call = myPeer.call(userId, stream);\r\n\r\n    // adding peers\r\n    console.log(\"peers adding \");\r\n    // addpeers((prevstate) => ({\r\n    //   ...prevstate,\r\n    //   [userId]: call,\r\n    // }));\r\n\r\n    const updatedValue = {};\r\n    updatedValue[userId] = call;\r\n    addpeers({\r\n      ...peers,\r\n      ...updatedValue,\r\n    });\r\n    console.log(\"peers \", peers[userId]);\r\n\r\n    const video = document.createElement(\"video\");\r\n\r\n    call.on(\"stream\", (userVideoStream) => {\r\n      console.log(\"streaming \");\r\n      addVideoStream(video, userVideoStream);\r\n    });\r\n    call.on(\"close\", () => {\r\n      video.remove();\r\n    });\r\n\r\n    //peers[userId] = call;\r\n  };\r\n\r\n  const addVideoStream = (video, stream) => {\r\n    console.log(\"adding video stream\");\r\n    const videoGrid = document.getElementById(\"video-grid\");\r\n    video.srcObject = stream;\r\n    video.addEventListener(\"loadedmetadata\", () => {\r\n      video.play();\r\n    });\r\n    videoGrid.append(video);\r\n    console.log(\":appending\");\r\n  };\r\n  useEffect(() => {\r\n    console.log(props.match.params.id);\r\n    console.log(\"mount it using useEffect!\");\r\n\r\n    const myVideo = document.createElement(\"video\");\r\n    myVideo.muted = true;\r\n\r\n    console.log(\"alright now \");\r\n    navigator.mediaDevices\r\n      .getUserMedia({\r\n        video: true,\r\n        audio: true,\r\n      })\r\n      .then((stream) => {\r\n        setstream(stream);\r\n        addVideoStream(myVideo, stream);\r\n      });\r\n  }, [peers]);\r\n\r\n  return (\r\n    <div id=\"video-grid\">\r\n      <p>video chat room</p>\r\n\r\n      <video>Start streaming</video>\r\n      {this.chatroom}\r\n    </div>\r\n  );\r\n};\r\nexport default withRouter(Videochatroom);\r\n"]},"metadata":{},"sourceType":"module"}