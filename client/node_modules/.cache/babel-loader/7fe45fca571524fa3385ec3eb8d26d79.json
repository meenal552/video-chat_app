{"ast":null,"code":"import openSocket from 'socket.io-client';\nimport Peer from 'peerjs';\nconst {\n  websocket,\n  peerjsEndpoint\n} = env_config;\n\nconst initializePeerConnection = () => {\n  return new Peer('', {\n    host: peerjsEndpoint,\n    // need to provide peerjs server endpoint \n    // (something like localhost:9000)\n    secure: true\n  });\n};\n\nconst initializeSocketConnection = () => {\n  return openSocket.connect(websocket, {\n    // need to provide backend server endpoint \n    // (ws://localhost:5000) if ssl provided then\n    // (wss://localhost:5000) \n    secure: true,\n    reconnection: true,\n    rejectUnauthorized: false,\n    reconnectionAttempts: 10\n  });\n};\n\nclass Connection {\n  constructor(settings) {\n    this.videoContainer = {};\n    this.message = [];\n    this.streaming = false;\n    this.myID = '';\n\n    this.initializeSocketEvents = () => {\n      this.socket.on('connect', () => {\n        console.log('socket connected');\n      });\n      this.socket.on('user-disconnected', userID => {\n        console.log('user disconnected-- closing peers', userID);\n        peers[userID] && peers[userID].close();\n        this.removeVideo(userID);\n      });\n      this.socket.on('disconnect', () => {\n        console.log('socket disconnected --');\n      });\n      this.socket.on('error', err => {\n        console.log('socket error --', err);\n      });\n    };\n\n    this.initializePeersEvents = () => {\n      this.myPeer.on('open', id => {\n        this.myID = id;\n        const roomID = window.location.pathname.split('/')[2];\n        const userData = {\n          userID: id,\n          roomID\n        };\n        console.log('peers established and joined room', userData);\n        this.socket.emit('join-room', userData);\n        this.setNavigatorToStream();\n      });\n      this.myPeer.on('error', err => {\n        console.log('peer connection error', err);\n        this.myPeer.reconnect();\n      });\n    };\n\n    this.setNavigatorToStream = () => {\n      this.getVideoAudioStream().then(stream => {\n        if (stream) {\n          this.streaming = true;\n          this.createVideo({\n            id: this.myID,\n            stream\n          });\n          this.setPeersListeners(stream);\n          this.newUserConnection(stream);\n        }\n      });\n    };\n\n    this.getVideoAudioStream = (video = true, audio = true) => {\n      var _this$settings$params;\n\n      let quality = (_this$settings$params = this.settings.params) === null || _this$settings$params === void 0 ? void 0 : _this$settings$params.quality;\n      if (quality) quality = parseInt(quality);\n      const myNavigator = navigator.mediaDevices.getUserMedia || navigator.mediaDevices.webkitGetUserMedia || navigator.mediaDevices.mozGetUserMedia || navigator.mediaDevices.msGetUserMedia;\n      return myNavigator({\n        video: video ? {\n          frameRate: quality ? quality : 12,\n          noiseSuppression: true,\n          width: {\n            min: 640,\n            ideal: 1280,\n            max: 1920\n          },\n          height: {\n            min: 480,\n            ideal: 720,\n            max: 1080\n          }\n        } : false,\n        audio: audio\n      });\n    };\n\n    this.createVideo = createObj => {\n      if (!this.videoContainer[createObj.id]) {\n        this.videoContainer[createObj.id] = { ...createObj\n        };\n        const roomContainer = document.getElementById('room-container');\n        const videoContainer = document.createElement('div');\n        const video = document.createElement('video');\n        video.srcObject = this.videoContainer[createObj.id].stream;\n        video.id = createObj.id;\n        video.autoplay = true;\n        if (this.myID === createObj.id) video.muted = true;\n        videoContainer.appendChild(video);\n        roomContainer.append(videoContainer);\n      } else {\n        // @ts-ignore\n        const object = document.getElementById(createObj.id);\n        if (object) object.srcObject = createObj.stream;\n      }\n    };\n\n    this.setPeersListeners = stream => {\n      this.myPeer.on('call', call => {\n        call.answer(stream);\n        call.on('stream', userVideoStream => {\n          console.log('user stream data', userVideoStream);\n          this.createVideo({\n            id: call.metadata.id,\n            stream: userVideoStream\n          });\n        });\n        call.on('close', () => {\n          console.log('closing peers listeners', call.metadata.id);\n          this.removeVideo(call.metadata.id);\n        });\n        call.on('error', () => {\n          console.log('peer error ------');\n          this.removeVideo(call.metadata.id);\n        });\n        peers[call.metadata.id] = call;\n      });\n    };\n\n    this.newUserConnection = stream => {\n      this.socket.on('new-user-connect', userData => {\n        console.log('New User Connected', userData);\n        this.connectToNewUser(userData, stream);\n      });\n    };\n\n    this.removeVideo = id => {\n      delete this.videoContainer[id];\n      const video = document.getElementById(id);\n      if (video) video.remove();\n    };\n\n    this.settings = settings;\n    this.myPeer = initializePeerConnection();\n    this.socket = initializeSocketConnection();\n    this.initializeSocketEvents();\n    this.initializePeersEvents();\n  }\n\n  connectToNewUser(userData, stream) {\n    const {\n      userID\n    } = userData;\n    const call = this.myPeer.call(userID, stream, {\n      metadata: {\n        id: this.myID\n      }\n    });\n    call.on('stream', userVideoStream => {\n      this.createVideo({\n        id: userID,\n        stream: userVideoStream,\n        userData\n      });\n    });\n    call.on('close', () => {\n      console.log('closing new user', userID);\n      this.removeVideo(userID);\n    });\n    call.on('error', () => {\n      console.log('peer error ------');\n      this.removeVideo(userID);\n    });\n    peers[userID] = call;\n  } // destoryConnection = () => {\n  //     const myMediaTracks = this.videoContainer[this.myID]?.stream.getTracks();\n  //     myMediaTracks?.forEach((track:any) => {\n  //         track.stop();\n  //     })\n  //     socketInstance?.socket.disconnect();\n  //     this.myPeer.destroy();\n  // }\n\n\n}\n\nexport default function createSocketConnectionInstance(settings = {}) {\n  return socketInstance = new Connection(settings);\n}","map":{"version":3,"sources":["E:/video_project/client/src/Components/Connection.js"],"names":["openSocket","Peer","websocket","peerjsEndpoint","env_config","initializePeerConnection","host","secure","initializeSocketConnection","connect","reconnection","rejectUnauthorized","reconnectionAttempts","Connection","constructor","settings","videoContainer","message","streaming","myID","initializeSocketEvents","socket","on","console","log","userID","peers","close","removeVideo","err","initializePeersEvents","myPeer","id","roomID","window","location","pathname","split","userData","emit","setNavigatorToStream","reconnect","getVideoAudioStream","then","stream","createVideo","setPeersListeners","newUserConnection","video","audio","quality","params","parseInt","myNavigator","navigator","mediaDevices","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","frameRate","noiseSuppression","width","min","ideal","max","height","createObj","roomContainer","document","getElementById","createElement","srcObject","autoplay","muted","appendChild","append","object","call","answer","userVideoStream","metadata","connectToNewUser","remove","createSocketConnectionInstance","socketInstance"],"mappings":"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","sourcesContent":["import openSocket from 'socket.io-client';\r\nimport Peer from 'peerjs';\r\nconst { websocket, peerjsEndpoint } = env_config;\r\nconst initializePeerConnection = () => {\r\n    return new Peer('', {\r\n        host: peerjsEndpoint, // need to provide peerjs server endpoint \r\n                              // (something like localhost:9000)\r\n        secure: true\r\n    });\r\n}\r\nconst initializeSocketConnection = () => {\r\n    return openSocket.connect(websocket, {// need to provide backend server endpoint \r\n                              // (ws://localhost:5000) if ssl provided then\r\n                              // (wss://localhost:5000) \r\n        secure: true, \r\n        reconnection: true, \r\n        rejectUnauthorized: false,\r\n        reconnectionAttempts: 10\r\n    });\r\n}\r\nclass Connection {\r\n    videoContainer = {};\r\n    message = [];\r\n    settings;\r\n    streaming = false;\r\n    myPeer;\r\n    socket;\r\n    myID = '';\r\n    constructor(settings) {\r\n        this.settings = settings;\r\n        this.myPeer = initializePeerConnection();\r\n        this.socket = initializeSocketConnection();\r\n        this.initializeSocketEvents();\r\n        this.initializePeersEvents();\r\n    }\r\n    initializeSocketEvents = () => {\r\n        this.socket.on('connect', () => {\r\n            console.log('socket connected');\r\n        });\r\n        this.socket.on('user-disconnected', (userID) => {\r\n            console.log('user disconnected-- closing peers', userID);\r\n            peers[userID] && peers[userID].close();\r\n            this.removeVideo(userID);\r\n        });\r\n        this.socket.on('disconnect', () => {\r\n            console.log('socket disconnected --');\r\n        });\r\n        this.socket.on('error', (err) => {\r\n            console.log('socket error --', err);\r\n        });\r\n    }\r\n    initializePeersEvents = () => {\r\n        this.myPeer.on('open', (id) => {\r\n            this.myID = id;\r\n            const roomID = window.location.pathname.split('/')[2];\r\n            const userData = {\r\n                userID: id, roomID\r\n            }\r\n            console.log('peers established and joined room', userData);\r\n            this.socket.emit('join-room', userData);\r\n            this.setNavigatorToStream();\r\n        });\r\n        this.myPeer.on('error', (err) => {\r\n            console.log('peer connection error', err);\r\n            this.myPeer.reconnect();\r\n        })\r\n    }\r\n    setNavigatorToStream = () => {\r\n        this.getVideoAudioStream().then((stream) => {\r\n            if (stream) {\r\n                this.streaming = true;\r\n                this.createVideo({ id: this.myID, stream });\r\n                this.setPeersListeners(stream);\r\n                this.newUserConnection(stream);\r\n            }\r\n        })\r\n    }\r\n    getVideoAudioStream = (video=true, audio=true) => {\r\n        let quality = this.settings.params?.quality;\r\n        if (quality) quality = parseInt(quality);\r\n        const myNavigator = navigator.mediaDevices.getUserMedia || \r\n        navigator.mediaDevices.webkitGetUserMedia || \r\n        navigator.mediaDevices.mozGetUserMedia || \r\n        navigator.mediaDevices.msGetUserMedia;\r\n        return myNavigator({\r\n            video: video ? {\r\n                frameRate: quality ? quality : 12,\r\n                noiseSuppression: true,\r\n                width: {min: 640, ideal: 1280, max: 1920},\r\n                height: {min: 480, ideal: 720, max: 1080}\r\n            } : false,\r\n            audio: audio,\r\n        });\r\n    }\r\n    createVideo = (createObj) => {\r\n        if (!this.videoContainer[createObj.id]) {\r\n            this.videoContainer[createObj.id] = {\r\n                ...createObj,\r\n            };\r\n            const roomContainer = document.getElementById('room-container');\r\n            const videoContainer = document.createElement('div');\r\n            const video = document.createElement('video');\r\n            video.srcObject = this.videoContainer[createObj.id].stream;\r\n            video.id = createObj.id;\r\n            video.autoplay = true;\r\n            if (this.myID === createObj.id) video.muted = true;\r\n            videoContainer.appendChild(video)\r\n            roomContainer.append(videoContainer);\r\n        } else {\r\n            // @ts-ignore\r\n            const object=document.getElementById(createObj.id);\r\n            if(object)\r\n            object.srcObject = createObj.stream;\r\n        }\r\n    }\r\n    setPeersListeners = (stream) => {\r\n        this.myPeer.on('call', (call) => {\r\n            call.answer(stream);\r\n            call.on('stream', (userVideoStream) => {console.log('user stream data', \r\n            userVideoStream)\r\n                this.createVideo({ id: call.metadata.id, stream: userVideoStream });\r\n            });\r\n            call.on('close', () => {\r\n                console.log('closing peers listeners', call.metadata.id);\r\n                this.removeVideo(call.metadata.id);\r\n            });\r\n            call.on('error', () => {\r\n                console.log('peer error ------');\r\n                this.removeVideo(call.metadata.id);\r\n            });\r\n            peers[call.metadata.id] = call;\r\n        });\r\n    }\r\n    newUserConnection = (stream) => {\r\n        this.socket.on('new-user-connect', (userData) => {\r\n            console.log('New User Connected', userData);\r\n            this.connectToNewUser(userData, stream);\r\n        });\r\n    }\r\n    connectToNewUser(userData, stream) {\r\n        const { userID } = userData;\r\n        const call = this.myPeer.call(userID, stream, { metadata: { id: this.myID }});\r\n        call.on('stream', (userVideoStream) => {\r\n            this.createVideo({ id: userID, stream: userVideoStream, userData });\r\n        });\r\n        call.on('close', () => {\r\n            console.log('closing new user', userID);\r\n            this.removeVideo(userID);\r\n        });\r\n        call.on('error', () => {\r\n            console.log('peer error ------')\r\n            this.removeVideo(userID);\r\n        })\r\n        peers[userID] = call;\r\n    }\r\n    removeVideo = (id) => {\r\n        delete this.videoContainer[id];\r\n        const video = document.getElementById(id);\r\n        if (video) video.remove();\r\n    }\r\n    // destoryConnection = () => {\r\n    //     const myMediaTracks = this.videoContainer[this.myID]?.stream.getTracks();\r\n    //     myMediaTracks?.forEach((track:any) => {\r\n    //         track.stop();\r\n    //     })\r\n    //     socketInstance?.socket.disconnect();\r\n    //     this.myPeer.destroy();\r\n    // }\r\n}\r\n\r\nexport default function createSocketConnectionInstance(settings={}) {\r\n    return socketInstance = new Connection(settings);\r\n}"]},"metadata":{},"sourceType":"module"}