{"ast":null,"code":"var _jsxFileName = \"E:\\\\video_project\\\\client\\\\src\\\\Components\\\\JoinRoom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { io } from \"socket.io-client\";\nimport { withRouter } from \"react-router-dom\"; //import createSocketConnectionInstance from \"./Connection\"\n\nimport Peer from \"peerjs\"; //import { validate as uuidValidate } from \"uuid\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst JoinRoom = props => {\n  _s();\n\n  // let socketInstance = useRef(null);\n  const [socket, setSocket] = useState(\"\");\n  const [peers, addpeers] = useState({});\n  const myPeer = new Peer(undefined, {\n    host: \"/\",\n    port: \"3001\"\n  });\n  useEffect(() => {\n    console.log(props.match.params.id);\n    console.log(\"mount it using useEffect!\");\n    const newsocket = io.connect(\"http://localhost:4000\", {\n      query: {\n        roomId: props.match.params.id\n      }\n    });\n    setSocket(newsocket);\n    newsocket.on(\"user-disconnected\", userId => {\n      if (peers[userId]) peers[userId].close();\n    });\n    myPeer.on(\"open\", id => {\n      newsocket.emit(\"join-room\", id);\n    });\n  }, [peers]);\n  console.log(\"video started \");\n  const myVideo = document.createElement(\"video\");\n  myVideo.muted = true;\n  console.log(\"alright now \");\n  navigator.mediaDevices.getUserMedia({\n    video: true,\n    audio: true\n  }).then(stream => {\n    addVideoStream(myVideo, stream);\n    myPeer.on(\"call\", call => {\n      console.log(\"someone calling \");\n      call.answer(stream);\n      const video = document.createElement(\"video\");\n      call.on(\"stream\", userVideoStream => {\n        addVideoStream(video, userVideoStream);\n      });\n    });\n    newsocket.on(\"user-connected\", userId => {\n      console.log(\"new user connected \" + userId);\n      connectToNewUser(userId, stream);\n    });\n  });\n\n  const connectToNewUser = (userId, stream) => {\n    console.log(\"connecting to newuser! \");\n    const call = myPeer.call(userId, stream); // adding peers\n\n    console.log(\"peers adding \"); // addpeers((prevstate) => ({\n    //   ...prevstate,\n    //   [userId]: call,\n    // }));\n    // const updatedValue = {};\n    // updatedValue[userId] = call;\n    // addpeers({\n    //   ...peers,\n    //   ...updatedValue,\n    // });\n    // console.log(\"peers \", peers[userId]);\n\n    const video = document.createElement(\"video\");\n    call.on(\"stream\", userVideoStream => {\n      console.log(\"streaming \");\n      addVideoStream(video, userVideoStream);\n    });\n    call.on(\"close\", () => {\n      video.remove();\n    }); //peers[userId] = call;\n  };\n\n  const addVideoStream = (video, stream) => {\n    console.log(\"adding video stream\");\n    const videoGrid = document.getElementById(\"video-grid\");\n    video.srcObject = stream;\n    video.addEventListener(\"loadedmetadata\", () => {\n      video.play();\n    });\n    videoGrid.append(video);\n  };\n\n  console.log(\"rendering \");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"video-grid\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"hello there \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"start video chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      children: \"Start streaming\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n\n_s(JoinRoom, \"6yrr9BPIS9qt4iyEQB/qgZ+Jqbc=\");\n\n_c = JoinRoom;\nexport default _c2 = withRouter(JoinRoom);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"JoinRoom\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["E:/video_project/client/src/Components/JoinRoom.js"],"names":["React","useState","useEffect","io","withRouter","Peer","JoinRoom","props","socket","setSocket","peers","addpeers","myPeer","undefined","host","port","console","log","match","params","id","newsocket","connect","query","roomId","on","userId","close","emit","myVideo","document","createElement","muted","navigator","mediaDevices","getUserMedia","video","audio","then","stream","addVideoStream","call","answer","userVideoStream","connectToNewUser","remove","videoGrid","getElementById","srcObject","addEventListener","play","append"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { io } from \"socket.io-client\";\r\nimport { withRouter } from \"react-router-dom\";\r\n//import createSocketConnectionInstance from \"./Connection\"\r\nimport Peer from \"peerjs\";\r\n//import { validate as uuidValidate } from \"uuid\";\r\n\r\nconst JoinRoom = (props) => {\r\n  // let socketInstance = useRef(null);\r\n  const [socket, setSocket] = useState(\"\");\r\n  const [peers, addpeers] = useState({});\r\n\r\n  const myPeer = new Peer(undefined, {\r\n    host: \"/\",\r\n    port: \"3001\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    console.log(props.match.params.id);\r\n    console.log(\"mount it using useEffect!\");\r\n    const newsocket = io.connect(\"http://localhost:4000\", {\r\n      query: {\r\n        roomId: props.match.params.id,\r\n      },\r\n    });\r\n    setSocket(newsocket);\r\n\r\n    newsocket.on(\"user-disconnected\", (userId) => {\r\n      if (peers[userId]) peers[userId].close();\r\n    });\r\n\r\n    myPeer.on(\"open\", (id) => {\r\n      newsocket.emit(\"join-room\", id);\r\n    });\r\n  }, [peers]);\r\n\r\n  console.log(\"video started \");\r\n\r\n  const myVideo = document.createElement(\"video\");\r\n  myVideo.muted = true;\r\n\r\n  console.log(\"alright now \");\r\n  navigator.mediaDevices\r\n    .getUserMedia({\r\n      video: true,\r\n      audio: true,\r\n    })\r\n    .then((stream) => {\r\n      addVideoStream(myVideo, stream);\r\n\r\n      myPeer.on(\"call\", (call) => {\r\n        console.log(\"someone calling \");\r\n        call.answer(stream);\r\n        const video = document.createElement(\"video\");\r\n        call.on(\"stream\", (userVideoStream) => {\r\n          addVideoStream(video, userVideoStream);\r\n        });\r\n      });\r\n      newsocket.on(\"user-connected\", (userId) => {\r\n        console.log(\"new user connected \" + userId);\r\n        connectToNewUser(userId, stream);\r\n      });\r\n    });\r\n\r\n  const connectToNewUser = (userId, stream) => {\r\n    console.log(\"connecting to newuser! \");\r\n\r\n    const call = myPeer.call(userId, stream);\r\n\r\n    // adding peers\r\n    console.log(\"peers adding \");\r\n    // addpeers((prevstate) => ({\r\n    //   ...prevstate,\r\n    //   [userId]: call,\r\n    // }));\r\n\r\n    // const updatedValue = {};\r\n    // updatedValue[userId] = call;\r\n    // addpeers({\r\n    //   ...peers,\r\n    //   ...updatedValue,\r\n    // });\r\n    // console.log(\"peers \", peers[userId]);\r\n    const video = document.createElement(\"video\");\r\n    call.on(\"stream\", (userVideoStream) => {\r\n      console.log(\"streaming \");\r\n      addVideoStream(video, userVideoStream);\r\n    });\r\n    call.on(\"close\", () => {\r\n      video.remove();\r\n    });\r\n\r\n    //peers[userId] = call;\r\n  };\r\n\r\n  const addVideoStream = (video, stream) => {\r\n    console.log(\"adding video stream\");\r\n    const videoGrid = document.getElementById(\"video-grid\");\r\n    video.srcObject = stream;\r\n    video.addEventListener(\"loadedmetadata\", () => {\r\n      video.play();\r\n    });\r\n    videoGrid.append(video);\r\n  };\r\n\r\n  console.log(\"rendering \");\r\n  return (\r\n    <div id=\"video-grid\">\r\n      <p>hello there </p>\r\n      <button>start video chat</button>\r\n      <video>Start streaming</video>\r\n    </div>\r\n  );\r\n};\r\nexport default withRouter(JoinRoom);\r\n"]},"metadata":{},"sourceType":"module"}