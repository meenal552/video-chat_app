{"ast":null,"code":"var _jsxFileName = \"E:\\\\video_project\\\\client\\\\src\\\\Components\\\\Commonroom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Commonroom = props => {\n  _s();\n\n  const [connection, setconnection] = useState(null);\n  let localVideoStream = \"\";\n  useEffect(() => {\n    console.log(\"notsocket \");\n\n    if (props.newsocket) {\n      console.log(\"found socket \");\n      props.newsocket.on(\"play-video\", peerdata => {\n        console.log(\"peerdata \" + peerdata);\n        peerdata.forEach(peer => {\n          const con = props.myPeer.connect(peer);\n          setconnection(con);\n          con.send(\"hello\");\n          props.myPeer.on(\"connection\", () => {\n            console.log(\"connection\");\n            con.on(\"open\", () => {\n              console.log(\"open\");\n              con.on(\"data\", data => {\n                console.log(\"video data \" + data);\n              });\n            });\n          });\n        });\n      });\n    }\n  }, [props]);\n\n  const startvideo = e => {\n    console.log(\"uploaded\");\n\n    if (e.target.files.length == 0) {\n      console.log(\"empty\");\n    }\n\n    let file = e.target.files[0];\n    const video = document.getElementById(\"uploaded-video\");\n    video.src = URL.createObjectURL(file);\n    let type = file.type;\n\n    if (!video.canPlayType(type)) {\n      alert(\"cannot play that file\");\n      return;\n    }\n\n    video.play().then(() => {\n      if (typeof video.mozCaptureStream == \"function\") {\n        localVideoStream = video.mozCaptureStream();\n      } else if (typeof video.captureStream == \"function\") {\n        localVideoStream = video.captureStream();\n      }\n\n      props.newsocket.emit(\"play-video\");\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"video/*'\",\n      onChange: startvideo,\n      id: \"uploaded-file\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      id: \"uploaded-video\",\n      autoPlay: true,\n      controls: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Commonroom, \"YFM6rjYzmqx9BaE8s9dMGU8/Iys=\");\n\n_c = Commonroom;\nexport default Commonroom;\n\nvar _c;\n\n$RefreshReg$(_c, \"Commonroom\");","map":{"version":3,"sources":["E:/video_project/client/src/Components/Commonroom.js"],"names":["React","useState","useEffect","Commonroom","props","connection","setconnection","localVideoStream","console","log","newsocket","on","peerdata","forEach","peer","con","myPeer","connect","send","data","startvideo","e","target","files","length","file","video","document","getElementById","src","URL","createObjectURL","type","canPlayType","alert","play","then","mozCaptureStream","captureStream","emit"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nconst Commonroom = (props) => {\r\n  const [connection, setconnection] = useState(null);\r\n  let localVideoStream = \"\";\r\n  useEffect(() => {\r\n    console.log(\"notsocket \");\r\n    if (props.newsocket) {\r\n      console.log(\"found socket \");\r\n      props.newsocket.on(\"play-video\", (peerdata) => {\r\n        console.log(\"peerdata \" + peerdata);\r\n        peerdata.forEach((peer) => {\r\n          const con = props.myPeer.connect(peer);\r\n          setconnection(con);\r\n          con.send(\"hello\");\r\n          props.myPeer.on(\"connection\", () => {\r\n            console.log(\"connection\");\r\n            con.on(\"open\", () => {\r\n              console.log(\"open\");\r\n              con.on(\"data\", (data) => {\r\n                console.log(\"video data \" + data);\r\n              });\r\n            });\r\n          });\r\n        });\r\n      });\r\n    }\r\n  }, [props]);\r\n  const startvideo = (e) => {\r\n    console.log(\"uploaded\");\r\n    if (e.target.files.length == 0) {\r\n      console.log(\"empty\");\r\n    }\r\n\r\n    let file = e.target.files[0];\r\n    const video = document.getElementById(\"uploaded-video\");\r\n    video.src = URL.createObjectURL(file);\r\n\r\n    let type = file.type;\r\n    if (!video.canPlayType(type)) {\r\n      alert(\"cannot play that file\");\r\n      return;\r\n    }\r\n\r\n    video.play().then(() => {\r\n      if (typeof video.mozCaptureStream == \"function\") {\r\n        localVideoStream = video.mozCaptureStream();\r\n      } else if (typeof video.captureStream == \"function\") {\r\n        localVideoStream = video.captureStream();\r\n      }\r\n      props.newsocket.emit(\"play-video\");\r\n    });\r\n  };\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"file\"\r\n        accept=\"video/*'\"\r\n        onChange={startvideo}\r\n        id=\"uploaded-file\"\r\n      ></input>\r\n      <video id=\"uploaded-video\" autoPlay controls></video>\r\n    </div>\r\n  );\r\n};\r\nexport default Commonroom;\r\n"]},"metadata":{},"sourceType":"module"}