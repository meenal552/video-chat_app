{"ast":null,"code":"var Socket = require('./socket');\n\nvar IOStream = require('./iostream');\n\nvar BlobReadStream = require('./blob-read-stream');\n\nexports = module.exports = lookup;\n/**\n * Expose Node Buffer for browser.\n *\n * @api public\n */\n\nexports.Buffer = Buffer;\n/**\n * Expose Socket constructor.\n *\n * @api public\n */\n\nexports.Socket = Socket;\n/**\n * Expose IOStream constructor.\n *\n * @api public\n */\n\nexports.IOStream = IOStream;\n/**\n * Forces base 64 encoding when emitting. Must be set to true for Socket.IO v0.9 or lower.\n *\n * @api public\n */\n\nexports.forceBase64 = false;\n/**\n * Look up an existing Socket.\n *\n * @param {socket.io#Socket} socket.io\n * @param {Object} options\n * @return {Socket} Socket instance\n * @api public\n */\n\nfunction lookup(sio, options) {\n  options = options || {};\n\n  if (null == options.forceBase64) {\n    options.forceBase64 = exports.forceBase64;\n  }\n\n  if (!sio._streamSocket) {\n    sio._streamSocket = new Socket(sio, options);\n  }\n\n  return sio._streamSocket;\n}\n/**\n * Creates a new duplex stream.\n *\n * @param {Object} options\n * @return {IOStream} duplex stream\n * @api public\n */\n\n\nexports.createStream = function (options) {\n  return new IOStream(options);\n};\n/**\n * Creates a new readable stream for Blob/File on browser.\n *\n * @param {Blob} blob\n * @param {Object} options\n * @return {BlobReadStream} stream\n * @api public\n */\n\n\nexports.createBlobReadStream = function (blob, options) {\n  return new BlobReadStream(blob, options);\n};","map":{"version":3,"sources":["E:/video_project/client/node_modules/socket.io-stream/lib/index.js"],"names":["Socket","require","IOStream","BlobReadStream","exports","module","lookup","Buffer","forceBase64","sio","options","_streamSocket","createStream","createBlobReadStream","blob"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,YAAD,CAAtB;;AACA,IAAIE,cAAc,GAAGF,OAAO,CAAC,oBAAD,CAA5B;;AAGAG,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiBE,MAA3B;AAEA;AACA;AACA;AACA;AACA;;AACAF,OAAO,CAACG,MAAR,GAAiBA,MAAjB;AAEA;AACA;AACA;AACA;AACA;;AACAH,OAAO,CAACJ,MAAR,GAAiBA,MAAjB;AAEA;AACA;AACA;AACA;AACA;;AACAI,OAAO,CAACF,QAAR,GAAmBA,QAAnB;AAEA;AACA;AACA;AACA;AACA;;AACAE,OAAO,CAACI,WAAR,GAAsB,KAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASF,MAAT,CAAgBG,GAAhB,EAAqBC,OAArB,EAA8B;AAC5BA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AACA,MAAI,QAAQA,OAAO,CAACF,WAApB,EAAiC;AAC/BE,IAAAA,OAAO,CAACF,WAAR,GAAsBJ,OAAO,CAACI,WAA9B;AACD;;AAED,MAAI,CAACC,GAAG,CAACE,aAAT,EAAwB;AACtBF,IAAAA,GAAG,CAACE,aAAJ,GAAoB,IAAIX,MAAJ,CAAWS,GAAX,EAAgBC,OAAhB,CAApB;AACD;;AACD,SAAOD,GAAG,CAACE,aAAX;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAP,OAAO,CAACQ,YAAR,GAAuB,UAASF,OAAT,EAAkB;AACvC,SAAO,IAAIR,QAAJ,CAAaQ,OAAb,CAAP;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAN,OAAO,CAACS,oBAAR,GAA+B,UAASC,IAAT,EAAeJ,OAAf,EAAwB;AACrD,SAAO,IAAIP,cAAJ,CAAmBW,IAAnB,EAAyBJ,OAAzB,CAAP;AACD,CAFD","sourcesContent":["var Socket = require('./socket');\nvar IOStream = require('./iostream');\nvar BlobReadStream = require('./blob-read-stream');\n\n\nexports = module.exports = lookup;\n\n/**\n * Expose Node Buffer for browser.\n *\n * @api public\n */\nexports.Buffer = Buffer;\n\n/**\n * Expose Socket constructor.\n *\n * @api public\n */\nexports.Socket = Socket;\n\n/**\n * Expose IOStream constructor.\n *\n * @api public\n */\nexports.IOStream = IOStream;\n\n/**\n * Forces base 64 encoding when emitting. Must be set to true for Socket.IO v0.9 or lower.\n *\n * @api public\n */\nexports.forceBase64 = false;\n\n/**\n * Look up an existing Socket.\n *\n * @param {socket.io#Socket} socket.io\n * @param {Object} options\n * @return {Socket} Socket instance\n * @api public\n */\nfunction lookup(sio, options) {\n  options = options || {};\n  if (null == options.forceBase64) {\n    options.forceBase64 = exports.forceBase64;\n  }\n\n  if (!sio._streamSocket) {\n    sio._streamSocket = new Socket(sio, options);\n  }\n  return sio._streamSocket;\n}\n\n/**\n * Creates a new duplex stream.\n *\n * @param {Object} options\n * @return {IOStream} duplex stream\n * @api public\n */\nexports.createStream = function(options) {\n  return new IOStream(options);\n};\n\n/**\n * Creates a new readable stream for Blob/File on browser.\n *\n * @param {Blob} blob\n * @param {Object} options\n * @return {BlobReadStream} stream\n * @api public\n */\nexports.createBlobReadStream = function(blob, options) {\n  return new BlobReadStream(blob, options);\n};\n"]},"metadata":{},"sourceType":"script"}