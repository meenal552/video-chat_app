{"ast":null,"code":"var _jsxFileName = \"E:\\\\video_project\\\\client\\\\src\\\\Components\\\\Videochatroom.js\";\nimport React, { useState, useEffect, Component } from \"react\";\nimport { io } from \"socket.io-client\";\nimport { withRouter } from \"react-router-dom\";\nimport Peer from \"peerjs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst initializePeerConnection = () => {\n  const myPeer = new Peer(undefined, {\n    host: \"/\",\n    port: \"3008\"\n  });\n  return myPeer;\n};\n\nexport default class Videochatroom extends Component {\n  constructor(props) {\n    super(props);\n\n    this.initializeSocketConnection = async () => {\n      const newsocket = io.connect(\"http://localhost:4000\", {\n        query: {\n          roomId: this.props.match.params.id\n        }\n      });\n      return newsocket;\n    };\n\n    this.initializeSocketEvents = () => {};\n\n    this.initializePeersEvents = () => {\n      this.myPeer.on(\"open\", id => {\n        console.log(\"user id send to join room \" + id);\n        this.socket.emit(\"join-room\", id);\n        this.setNavigatorToStream();\n      });\n    };\n\n    this.setNavigatorToStream = () => {\n      navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      }).then(stream => {\n        if (stream) {\n          const myVideo = document.getElementById(\"myvideo\");\n          myVideo.muted = true;\n          this.addVideoStream(myVideo, stream);\n          this.setPeersListeners(stream);\n          this.newUserConnection(stream);\n        }\n      });\n    };\n\n    this.setPeersListeners = stream => {\n      this.myPeer.on(\"call\", call => {\n        console.log(\"someone calling\");\n        call.answer(stream);\n        const video = document.createElement(\"video\");\n        console.log(\"call.peer \" + call.peer);\n        video.id = call.peer;\n        call.on(\"stream\", userVideoStream => {\n          this.addVideoStream(video, userVideoStream);\n        });\n        call.on(\"close\", () => {// myVideo.remove();\n        });\n      });\n    };\n\n    this.newUserConnection = stream => {\n      this.socket.on(\"user-connected\", userId => {\n        console.log(\"user id received of new user\" + userId);\n        this.connectToNewUser(userId, stream, this.myPeer);\n      });\n    };\n\n    this.connectToNewUser = (userId, stream, myPeer) => {\n      console.log(\"connecting to newuser! \");\n      const call = this.myPeer.call(userId, stream);\n      call.on(\"error\", error => {\n        console.log(error);\n      }); // adding peers flush updates\n      // console.log(\"peers adding \");\n      // addpeers((prevstate) => ({\n      //   ...prevstate,\n      //   [userId]: call,\n      // }));\n      // const updatedValue = {};\n      // updatedValue[userId] = call;\n      // addpeers({\n      //   ...peers,\n      //   ...updatedValue,\n      // });\n      // console.log(\"peers \", peers[userId]);\n\n      const video = document.createElement(\"video\");\n      video.id = userId;\n      console.log(\"cALL \" + call + \"peer \" + myPeer.id);\n      if (call === null || call === \"\" || call === undefined) console.log(\"null\");\n      call.on(\"stream\", userVideoStream => {\n        console.log(\"streaming \");\n        this.addVideoStream(video, userVideoStream);\n      });\n      call.on(\"close\", () => {\n        console.log(\"call closing \");\n        video.remove();\n      });\n      console.log(\"close\");\n    };\n\n    this.addVideoStream = (video, stream) => {\n      console.log(\"adding video stream with id \", video.id);\n      const videoGrid = document.getElementById(\"video-grid\");\n      video.srcObject = stream;\n      video.addEventListener(\"loadedmetadata\", () => {\n        video.play();\n      });\n      videoGrid.append(video);\n      console.log(\":appending\");\n    };\n\n    console.log(\"props \" + this.props.match.params.id);\n    this.myPeer = initializePeerConnection();\n    this.socket = this.initializeSocketConnection();\n    this.initializeSocketEvents();\n    this.initializePeersEvents();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"video-grid\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"video chat room\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n          id: \"myvideo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"pause\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["E:/video_project/client/src/Components/Videochatroom.js"],"names":["React","useState","useEffect","Component","io","withRouter","Peer","initializePeerConnection","myPeer","undefined","host","port","Videochatroom","constructor","props","initializeSocketConnection","newsocket","connect","query","roomId","match","params","id","initializeSocketEvents","initializePeersEvents","on","console","log","socket","emit","setNavigatorToStream","navigator","mediaDevices","getUserMedia","video","audio","then","stream","myVideo","document","getElementById","muted","addVideoStream","setPeersListeners","newUserConnection","call","answer","createElement","peer","userVideoStream","userId","connectToNewUser","error","remove","videoGrid","srcObject","addEventListener","play","append","render"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Component } from \"react\";\r\nimport { io } from \"socket.io-client\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport Peer from \"peerjs\";\r\n\r\nconst initializePeerConnection = () => {\r\n  const myPeer = new Peer(undefined, {\r\n    host: \"/\",\r\n    port: \"3008\",\r\n  });\r\n  return myPeer;\r\n};\r\n\r\nexport default class Videochatroom extends Component {\r\n  myPeer;\r\n  socket;\r\n  peers;\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    console.log(\"props \" + this.props.match.params.id);\r\n    this.myPeer = initializePeerConnection();\r\n    this.socket = this.initializeSocketConnection();\r\n    this.initializeSocketEvents();\r\n    this.initializePeersEvents();\r\n  }\r\n  initializeSocketConnection = async () => {\r\n    const newsocket = io.connect(\"http://localhost:4000\", {\r\n      query: {\r\n        roomId: this.props.match.params.id,\r\n      },\r\n    });\r\n    return newsocket;\r\n  };\r\n  initializeSocketEvents = () => {};\r\n  initializePeersEvents = () => {\r\n    this.myPeer.on(\"open\", (id) => {\r\n      console.log(\"user id send to join room \" + id);\r\n      this.socket.emit(\"join-room\", id);\r\n      this.setNavigatorToStream();\r\n    });\r\n  };\r\n  setNavigatorToStream = () => {\r\n    navigator.mediaDevices\r\n      .getUserMedia({\r\n        video: true,\r\n        audio: true,\r\n      })\r\n      .then((stream) => {\r\n        if (stream) {\r\n          const myVideo = document.getElementById(\"myvideo\");\r\n          myVideo.muted = true;\r\n          this.addVideoStream(myVideo, stream);\r\n          this.setPeersListeners(stream);\r\n          this.newUserConnection(stream);\r\n        }\r\n      });\r\n  };\r\n\r\n  setPeersListeners = (stream) => {\r\n    this.myPeer.on(\"call\", (call) => {\r\n      console.log(\"someone calling\");\r\n\r\n      call.answer(stream);\r\n      const video = document.createElement(\"video\");\r\n      console.log(\"call.peer \" + call.peer);\r\n      video.id = call.peer;\r\n\r\n      call.on(\"stream\", (userVideoStream) => {\r\n        this.addVideoStream(video, userVideoStream);\r\n      });\r\n\r\n      call.on(\"close\", () => {\r\n        // myVideo.remove();\r\n      });\r\n    });\r\n  };\r\n  newUserConnection = (stream) => {\r\n    this.socket.on(\"user-connected\", (userId) => {\r\n      console.log(\"user id received of new user\" + userId);\r\n\r\n      this.connectToNewUser(userId, stream, this.myPeer);\r\n    });\r\n  };\r\n  connectToNewUser = (userId, stream, myPeer) => {\r\n    console.log(\"connecting to newuser! \");\r\n\r\n    const call = this.myPeer.call(userId, stream);\r\n\r\n    call.on(\"error\", (error) => {\r\n      console.log(error);\r\n    });\r\n    // adding peers flush updates\r\n    // console.log(\"peers adding \");\r\n    // addpeers((prevstate) => ({\r\n    //   ...prevstate,\r\n    //   [userId]: call,\r\n    // }));\r\n\r\n    // const updatedValue = {};\r\n    // updatedValue[userId] = call;\r\n    // addpeers({\r\n    //   ...peers,\r\n    //   ...updatedValue,\r\n    // });\r\n    // console.log(\"peers \", peers[userId]);\r\n\r\n    const video = document.createElement(\"video\");\r\n    video.id = userId;\r\n    console.log(\"cALL \" + call + \"peer \" + myPeer.id);\r\n    if (call === null || call === \"\" || call === undefined) console.log(\"null\");\r\n\r\n    call.on(\"stream\", (userVideoStream) => {\r\n      console.log(\"streaming \");\r\n      this.addVideoStream(video, userVideoStream);\r\n    });\r\n\r\n    call.on(\"close\", () => {\r\n      console.log(\"call closing \");\r\n      video.remove();\r\n    });\r\n    console.log(\"close\");\r\n  };\r\n  addVideoStream = (video, stream) => {\r\n    console.log(\"adding video stream with id \", video.id);\r\n\r\n    const videoGrid = document.getElementById(\"video-grid\");\r\n    video.srcObject = stream;\r\n    video.addEventListener(\"loadedmetadata\", () => {\r\n      video.play();\r\n    });\r\n    videoGrid.append(video);\r\n\r\n    console.log(\":appending\");\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div id=\"video-grid\">\r\n          <p>video chat room</p>\r\n          <video id=\"myvideo\" />\r\n          <button>pause</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}