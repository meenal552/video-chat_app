{"ast":null,"code":"import React, { Component } from \"react\";\nimport io from \"socket.io-client\";\nimport Peer from \"peerjs\";\nconst {\n  websocket\n} = env_config;\n\nconst initializePeerConnection = () => {\n  const myPeer = new Peer(undefined, {\n    host: \"/\",\n    port: \"3008\"\n  });\n  return myPeer;\n};\n\nconst initializeSocketConnection = async () => {\n  const newsocket = io.connect(\"http://localhost:4000\", {\n    query: {\n      roomId: this.props.match.params.id\n    }\n  });\n  return newsocket;\n};\n\nclass Connection {\n  constructor(settings) {\n    this.videoContainer = {};\n    this.message = [];\n    this.streaming = false;\n    this.myID = \"\";\n\n    this.initializeSocketEvents = () => {\n      this.socket.on(\"connect\", () => {\n        console.log(\"socket connected\");\n      });\n      this.socket.on(\"user-disconnected\", userID => {\n        console.log(\"user disconnected-- closing peers\", userID);\n        this.peers[userID] && this.peers[userID].close();\n        this.removeVideo(userID);\n      });\n      this.socket.on(\"disconnect\", () => {\n        console.log(\"socket disconnected --\");\n      });\n      this.socket.on(\"error\", err => {\n        console.log(\"socket error --\", err);\n      });\n    };\n\n    this.initializePeersEvents = () => {\n      this.myPeer.on(\"open\", id => {\n        this.myID = id;\n        const roomID = window.location.pathname.split(\"/\")[2];\n        const userData = {\n          userID: id,\n          roomID\n        };\n        console.log(\"peers established and joined room\", userData);\n        this.socket.emit(\"join-room\", userData);\n        this.setNavigatorToStream();\n      });\n      this.myPeer.on(\"error\", err => {\n        console.log(\"peer connection error\", err);\n        this.myPeer.reconnect();\n      });\n    };\n\n    this.setNavigatorToStream = () => {\n      this.getVideoAudioStream().then(stream => {\n        if (stream) {\n          this.streaming = true;\n          this.createVideo({\n            id: this.myID,\n            stream\n          });\n          this.setPeersListeners(stream);\n          this.newUserConnection(stream);\n        }\n      });\n    };\n\n    this.getVideoAudioStream = (video = true, audio = true) => {\n      var _this$settings$params;\n\n      let quality = (_this$settings$params = this.settings.params) === null || _this$settings$params === void 0 ? void 0 : _this$settings$params.quality;\n      if (quality) quality = parseInt(quality);\n      const myNavigator = navigator.mediaDevices.getUserMedia || navigator.mediaDevices.webkitGetUserMedia || navigator.mediaDevices.mozGetUserMedia || navigator.mediaDevices.msGetUserMedia;\n      return myNavigator({\n        video: video ? {\n          frameRate: quality ? quality : 12,\n          noiseSuppression: true,\n          width: {\n            min: 640,\n            ideal: 1280,\n            max: 1920\n          },\n          height: {\n            min: 480,\n            ideal: 720,\n            max: 1080\n          }\n        } : false,\n        audio: audio\n      });\n    };\n\n    this.createVideo = createObj => {\n      if (!this.videoContainer[createObj.id]) {\n        this.videoContainer[createObj.id] = { ...createObj\n        };\n        const roomContainer = document.getElementById(\"room-container\");\n        const videoContainer = document.createElement(\"div\");\n        const video = document.createElement(\"video\");\n        video.srcObject = this.videoContainer[createObj.id].stream;\n        video.id = createObj.id;\n        video.autoplay = true;\n        if (this.myID === createObj.id) video.muted = true;\n        videoContainer.appendChild(video);\n        roomContainer.append(videoContainer);\n      } else {// @ts-ignore\n        //document.getElementById(createObj.id)?.srcObject = createObj.stream;\n      }\n    };\n\n    this.setPeersListeners = stream => {\n      this.myPeer.on(\"call\", call => {\n        call.answer(stream);\n        call.on(\"stream\", userVideoStream => {\n          console.log(\"user stream data\", userVideoStream);\n          this.createVideo({\n            id: call.metadata.id,\n            stream: userVideoStream\n          });\n        });\n        call.on(\"close\", () => {\n          console.log(\"closing peers listeners\", call.metadata.id);\n          this.removeVideo(call.metadata.id);\n        });\n        call.on(\"error\", () => {\n          console.log(\"peer error ------\");\n          this.removeVideo(call.metadata.id);\n        });\n        this.peers[call.metadata.id] = call;\n      });\n    };\n\n    this.newUserConnection = stream => {\n      this.socket.on(\"new-user-connect\", userData => {\n        console.log(\"New User Connected\", userData);\n        this.connectToNewUser(userData, stream);\n      });\n    };\n\n    this.removeVideo = id => {\n      delete this.videoContainer[id];\n      const video = document.getElementById(id);\n      if (video) video.remove();\n    };\n\n    this.destoryConnection = () => {\n      var _this$videoContainer$, _this$socket;\n\n      const myMediaTracks = (_this$videoContainer$ = this.videoContainer[this.myID]) === null || _this$videoContainer$ === void 0 ? void 0 : _this$videoContainer$.stream.getTracks();\n      myMediaTracks === null || myMediaTracks === void 0 ? void 0 : myMediaTracks.forEach(track => {\n        track.stop();\n      });\n      (_this$socket = this.socket) === null || _this$socket === void 0 ? void 0 : _this$socket.socket.disconnect();\n      this.myPeer.destroy();\n    };\n\n    this.settings = settings;\n    this.myPeer = initializePeerConnection();\n    this.socket = initializeSocketConnection();\n    this.initializeSocketEvents();\n    this.initializePeersEvents();\n  }\n\n  connectToNewUser(userData, stream) {\n    const {\n      userID\n    } = userData;\n    const call = this.myPeer.call(userID, stream, {\n      metadata: {\n        id: this.myID\n      }\n    });\n    call.on(\"stream\", userVideoStream => {\n      this.createVideo({\n        id: userID,\n        stream: userVideoStream,\n        userData\n      });\n    });\n    call.on(\"close\", () => {\n      console.log(\"closing new user\", userID);\n      this.removeVideo(userID);\n    });\n    call.on(\"error\", () => {\n      console.log(\"peer error ------\");\n      this.removeVideo(userID);\n    });\n    this.peers[userID] = call;\n  }\n\n}\n\nexport default function Videochatroom(props) {\n  console.log(\"props\" + props.match.params.id);\n  const settings = {};\n  return new Connection(settings);\n}\n_c = Videochatroom;\n\nvar _c;\n\n$RefreshReg$(_c, \"Videochatroom\");","map":{"version":3,"sources":["E:/video_project/client/src/Components/Videochatroom.js"],"names":["React","Component","io","Peer","websocket","env_config","initializePeerConnection","myPeer","undefined","host","port","initializeSocketConnection","newsocket","connect","query","roomId","props","match","params","id","Connection","constructor","settings","videoContainer","message","streaming","myID","initializeSocketEvents","socket","on","console","log","userID","peers","close","removeVideo","err","initializePeersEvents","roomID","window","location","pathname","split","userData","emit","setNavigatorToStream","reconnect","getVideoAudioStream","then","stream","createVideo","setPeersListeners","newUserConnection","video","audio","quality","parseInt","myNavigator","navigator","mediaDevices","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","frameRate","noiseSuppression","width","min","ideal","max","height","createObj","roomContainer","document","getElementById","createElement","srcObject","autoplay","muted","appendChild","append","call","answer","userVideoStream","metadata","connectToNewUser","remove","destoryConnection","myMediaTracks","getTracks","forEach","track","stop","disconnect","destroy","Videochatroom"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport Peer from \"peerjs\";\r\nconst { websocket } = env_config;\r\n\r\nconst initializePeerConnection = () => {\r\n  const myPeer = new Peer(undefined, {\r\n    host: \"/\",\r\n    port: \"3008\",\r\n  });\r\n  return myPeer;\r\n};\r\n\r\nconst initializeSocketConnection = async () => {\r\n  const newsocket = io.connect(\"http://localhost:4000\", {\r\n    query: {\r\n      roomId: this.props.match.params.id,\r\n    },\r\n  });\r\n  return newsocket;\r\n};\r\n\r\nclass Connection {\r\n  videoContainer = {};\r\n  message = [];\r\n  settings;\r\n  streaming = false;\r\n  myPeer;\r\n  socket;\r\n  peers;\r\n  myID = \"\";\r\n  constructor(settings) {\r\n    this.settings = settings;\r\n    this.myPeer = initializePeerConnection();\r\n    this.socket = initializeSocketConnection();\r\n    this.initializeSocketEvents();\r\n    this.initializePeersEvents();\r\n  }\r\n  initializeSocketEvents = () => {\r\n    this.socket.on(\"connect\", () => {\r\n      console.log(\"socket connected\");\r\n    });\r\n    this.socket.on(\"user-disconnected\", (userID) => {\r\n      console.log(\"user disconnected-- closing peers\", userID);\r\n      this.peers[userID] && this.peers[userID].close();\r\n      this.removeVideo(userID);\r\n    });\r\n    this.socket.on(\"disconnect\", () => {\r\n      console.log(\"socket disconnected --\");\r\n    });\r\n    this.socket.on(\"error\", (err) => {\r\n      console.log(\"socket error --\", err);\r\n    });\r\n  };\r\n  initializePeersEvents = () => {\r\n    this.myPeer.on(\"open\", (id) => {\r\n      this.myID = id;\r\n      const roomID = window.location.pathname.split(\"/\")[2];\r\n      const userData = {\r\n        userID: id,\r\n        roomID,\r\n      };\r\n      console.log(\"peers established and joined room\", userData);\r\n      this.socket.emit(\"join-room\", userData);\r\n      this.setNavigatorToStream();\r\n    });\r\n    this.myPeer.on(\"error\", (err) => {\r\n      console.log(\"peer connection error\", err);\r\n      this.myPeer.reconnect();\r\n    });\r\n  };\r\n  setNavigatorToStream = () => {\r\n    this.getVideoAudioStream().then((stream) => {\r\n      if (stream) {\r\n        this.streaming = true;\r\n        this.createVideo({ id: this.myID, stream });\r\n        this.setPeersListeners(stream);\r\n        this.newUserConnection(stream);\r\n      }\r\n    });\r\n  };\r\n  getVideoAudioStream = (video = true, audio = true) => {\r\n    let quality = this.settings.params?.quality;\r\n    if (quality) quality = parseInt(quality);\r\n    const myNavigator =\r\n      navigator.mediaDevices.getUserMedia ||\r\n      navigator.mediaDevices.webkitGetUserMedia ||\r\n      navigator.mediaDevices.mozGetUserMedia ||\r\n      navigator.mediaDevices.msGetUserMedia;\r\n    return myNavigator({\r\n      video: video\r\n        ? {\r\n            frameRate: quality ? quality : 12,\r\n            noiseSuppression: true,\r\n            width: { min: 640, ideal: 1280, max: 1920 },\r\n            height: { min: 480, ideal: 720, max: 1080 },\r\n          }\r\n        : false,\r\n      audio: audio,\r\n    });\r\n  };\r\n  createVideo = (createObj) => {\r\n    if (!this.videoContainer[createObj.id]) {\r\n      this.videoContainer[createObj.id] = {\r\n        ...createObj,\r\n      };\r\n      const roomContainer = document.getElementById(\"room-container\");\r\n      const videoContainer = document.createElement(\"div\");\r\n      const video = document.createElement(\"video\");\r\n      video.srcObject = this.videoContainer[createObj.id].stream;\r\n      video.id = createObj.id;\r\n      video.autoplay = true;\r\n      if (this.myID === createObj.id) video.muted = true;\r\n      videoContainer.appendChild(video);\r\n      roomContainer.append(videoContainer);\r\n    } else {\r\n      // @ts-ignore\r\n      //document.getElementById(createObj.id)?.srcObject = createObj.stream;\r\n    }\r\n  };\r\n  setPeersListeners = (stream) => {\r\n    this.myPeer.on(\"call\", (call) => {\r\n      call.answer(stream);\r\n      call.on(\"stream\", (userVideoStream) => {\r\n        console.log(\"user stream data\", userVideoStream);\r\n        this.createVideo({ id: call.metadata.id, stream: userVideoStream });\r\n      });\r\n      call.on(\"close\", () => {\r\n        console.log(\"closing peers listeners\", call.metadata.id);\r\n        this.removeVideo(call.metadata.id);\r\n      });\r\n      call.on(\"error\", () => {\r\n        console.log(\"peer error ------\");\r\n        this.removeVideo(call.metadata.id);\r\n      });\r\n      this.peers[call.metadata.id] = call;\r\n    });\r\n  };\r\n  newUserConnection = (stream) => {\r\n    this.socket.on(\"new-user-connect\", (userData) => {\r\n      console.log(\"New User Connected\", userData);\r\n      this.connectToNewUser(userData, stream);\r\n    });\r\n  };\r\n  connectToNewUser(userData, stream) {\r\n    const { userID } = userData;\r\n    const call = this.myPeer.call(userID, stream, {\r\n      metadata: { id: this.myID },\r\n    });\r\n    call.on(\"stream\", (userVideoStream) => {\r\n      this.createVideo({ id: userID, stream: userVideoStream, userData });\r\n    });\r\n    call.on(\"close\", () => {\r\n      console.log(\"closing new user\", userID);\r\n      this.removeVideo(userID);\r\n    });\r\n    call.on(\"error\", () => {\r\n      console.log(\"peer error ------\");\r\n      this.removeVideo(userID);\r\n    });\r\n    this.peers[userID] = call;\r\n  }\r\n  removeVideo = (id) => {\r\n    delete this.videoContainer[id];\r\n    const video = document.getElementById(id);\r\n    if (video) video.remove();\r\n  };\r\n  destoryConnection = () => {\r\n    const myMediaTracks = this.videoContainer[this.myID]?.stream.getTracks();\r\n    myMediaTracks?.forEach((track: any) => {\r\n      track.stop();\r\n    });\r\n    this.socket?.socket.disconnect();\r\n    this.myPeer.destroy();\r\n  };\r\n}\r\nexport default function Videochatroom(props) {\r\n  console.log(\"props\" + props.match.params.id);\r\n  const settings = {};\r\n  return new Connection(settings);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}