{"ast":null,"code":"var _jsxFileName = \"E:\\\\video_project\\\\client\\\\src\\\\Components\\\\JoinRoom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { io } from \"socket.io-client\"; //import createSocketConnectionInstance from \"./Connection\"\n\nimport Peer from 'peerjs'; //import { validate as uuidValidate } from \"uuid\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function JoinRoom(props) {\n  _s();\n\n  //socket.emit('join-room',{})\n  // let socketInstance = useRef(null);\n  const [socket, setSocket] = useState(\"\");\n  const myPeer = new Peer(undefined, {\n    host: '/',\n    port: '3001'\n  });\n  useEffect(() => {\n    console.log(props.match.params.id);\n    console.log('mount it using useEffect!');\n    const newsocket = io.connect(\"http://localhost:4000\", {\n      query: {\n        roomId: props.match.params.id\n      }\n    });\n    setSocket(newsocket); // startConnection();\n  }, []);\n  const myVideo = document.createElement('video');\n  myVideo.muted = true;\n  const peers = {};\n  navigator.mediaDevices.getUserMedia({\n    video: true,\n    audio: true\n  }).then(stream => {\n    addVideoStream(myVideo, stream);\n    myPeer.on('call', call => {\n      call.answer(stream);\n      const video = document.createElement('video');\n      call.on('stream', userVideoStream => {\n        addVideoStream(video, userVideoStream);\n      });\n    });\n    socket.on('user-connected', userId => {\n      connectToNewUser(userId, stream);\n    });\n  });\n  socket.on('user-disconnected', userId => {\n    if (peers[userId]) peers[userId].close();\n  });\n  myPeer.on('open', id => {\n    socket.emit('join-room', id);\n  });\n\n  function connectToNewUser(userId, stream) {\n    const call = myPeer.call(userId, stream);\n    const video = document.createElement('video');\n    call.on('stream', userVideoStream => {\n      addVideoStream(video, userVideoStream);\n    });\n    call.on('close', () => {\n      video.remove();\n    });\n    peers[userId] = call;\n  }\n\n  function addVideoStream(video, stream) {\n    video.srcObject = stream;\n    video.addEventListener('loadedmetadata', () => {\n      video.play();\n    });\n    videoGrid.append(video);\n  } //   const startConnection = () => {\n  //     const params = {quality: 12}\n  //     socketInstance.current = createSocketConnectionInstance({\n  //         params\n  //     });\n  // }\n  // const videochat=async()=>{\n  //   const stream = await navigator.mediaDevices.getUserMedia({\n  //     audio: true,\n  //     video: { width: 800, height: 300 }\n  //   })\n  //   socket.emit(\"showVideo\",stream);\n  //   socket.on(\"showVideo\",(stream)=>{\n  //     console.log(\"showing video\");\n  //     const videogrid=document.getElementById('video-grid');\n  //     var video = document.querySelector('video');\n  //     video.srcObject = stream;\n  //     video.addEventListener('loadedmetadata', () => {\n  //     video.play()\n  //     })\n  //     videogrid.append(video);\n  //   })\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"video-grid\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: videochat,\n      children: \"start video chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      children: \"Start streaming\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 12\n  }, this);\n}\n\n_s(JoinRoom, \"w1BP3r732wNKKc1yf8qU9j2Ax+E=\");\n\n_c = JoinRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"JoinRoom\");","map":{"version":3,"sources":["E:/video_project/client/src/Components/JoinRoom.js"],"names":["React","useState","useEffect","io","Peer","JoinRoom","props","socket","setSocket","myPeer","undefined","host","port","console","log","match","params","id","newsocket","connect","query","roomId","myVideo","document","createElement","muted","peers","navigator","mediaDevices","getUserMedia","video","audio","then","stream","addVideoStream","on","call","answer","userVideoStream","userId","connectToNewUser","close","emit","remove","srcObject","addEventListener","play","videoGrid","append","videochat"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { io } from \"socket.io-client\";\r\n//import createSocketConnectionInstance from \"./Connection\"\r\nimport Peer from 'peerjs'\r\n//import { validate as uuidValidate } from \"uuid\";\r\n    \r\n\r\n\r\n\r\nexport default function JoinRoom(props)\r\n{  //socket.emit('join-room',{})\r\n  // let socketInstance = useRef(null);\r\n   const  [socket,setSocket]=useState(\"\");\r\n\r\n   const myPeer = new Peer(undefined, {\r\n    host: '/',\r\n    port: '3001'\r\n  })\r\n\r\n    useEffect(() => {\r\n        console.log(props.match.params.id);\r\n        console.log('mount it using useEffect!');\r\n           const newsocket =  io.connect(\"http://localhost:4000\", {\r\n            query: {\r\n              roomId: props.match.params.id,\r\n              \r\n            },      \r\n          });\r\n          setSocket(newsocket);\r\n         // startConnection();\r\n       \r\n      }, []);\r\n\r\n      const myVideo = document.createElement('video')\r\n      myVideo.muted = true\r\n      const peers = {}\r\n      navigator.mediaDevices.getUserMedia({\r\n        video: true,\r\n        audio: true\r\n      }).then(stream => {\r\n        addVideoStream(myVideo, stream)\r\n      \r\n        myPeer.on('call', call => {\r\n          call.answer(stream) \r\n          const video = document.createElement('video')\r\n          call.on('stream', userVideoStream => {\r\n            addVideoStream(video, userVideoStream)\r\n          })\r\n        })\r\n      \r\n        socket.on('user-connected', userId => {\r\n          connectToNewUser(userId, stream)\r\n        })\r\n      })\r\n      \r\n      socket.on('user-disconnected', userId => {\r\n        if (peers[userId]) peers[userId].close()\r\n      })\r\n      \r\n      myPeer.on('open', (id) => {\r\n        socket.emit('join-room',id )\r\n      })\r\n      \r\n      function connectToNewUser(userId, stream) {\r\n        const call = myPeer.call(userId, stream)\r\n        const video = document.createElement('video')\r\n        call.on('stream', userVideoStream => {\r\n          addVideoStream(video, userVideoStream)\r\n        })\r\n        call.on('close', () => {\r\n          video.remove()\r\n        })\r\n      \r\n        peers[userId] = call\r\n      }\r\n      \r\n      function addVideoStream(video, stream) {\r\n        video.srcObject = stream\r\n        video.addEventListener('loadedmetadata', () => {\r\n          video.play()\r\n        })\r\n        videoGrid.append(video)\r\n      }\r\n \r\n     \r\n    //   const startConnection = () => {\r\n    //     const params = {quality: 12}\r\n    //     socketInstance.current = createSocketConnectionInstance({\r\n    //         params\r\n    //     });\r\n    // }\r\n\r\n\r\n    // const videochat=async()=>{\r\n    //   const stream = await navigator.mediaDevices.getUserMedia({\r\n    //     audio: true,\r\n    //     video: { width: 800, height: 300 }\r\n    //   })\r\n    //   socket.emit(\"showVideo\",stream);\r\n    \r\n     \r\n    //   socket.on(\"showVideo\",(stream)=>{\r\n    //     console.log(\"showing video\");\r\n    //     const videogrid=document.getElementById('video-grid');\r\n    //     var video = document.querySelector('video');\r\n    //     video.srcObject = stream;\r\n    //     video.addEventListener('loadedmetadata', () => {\r\n    //     video.play()\r\n    //     })\r\n    //     videogrid.append(video);\r\n    //   })\r\n\r\n           \r\n    // }\r\n    \r\n     \r\n   \r\n  \r\n\r\n    return(<div id='video-grid'>\r\n        \r\n        <button onClick={videochat}>start video chat</button>\r\n        <video>Start streaming</video>\r\n    </div>)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}