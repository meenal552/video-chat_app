{"ast":null,"code":"// import React, { useState, useEffect, Component } from \"react\";\n// import { io } from \"socket.io-client\";\n// import { withRouter } from \"react-router-dom\";\n// import Peer from \"peerjs\";\n// const initializePeerConnection = () => {\n//   const myPeer = new Peer(undefined, {\n//     host: \"/\",\n//     port: \"3008\",\n//   });\n//   return myPeer;\n// };\n// const initializeSocketConnection = async (props) => {\n//   const newsocket = io.connect(\"http://localhost:4000\", {\n//     query: {\n//       roomId: props,\n//     },\n//   });\n//   return newsocket;\n// };\n// export default class Videochatroom extends Component {\n//   myPeer;\n//   peers;\n//   state = {\n//     socket: null,\n//   };\n//   constructor(props) {\n//     super(props);\n//     console.log(\"props \" + this.props.roomid);\n//     this.myPeer = initializePeerConnection();\n//     this.socket = initializeSocketConnection(this.props.roomid);\n//     console.log(\"socket \" + this.socket.id);\n//     this.initializeSocketEvents();\n//     this.initializePeersEvents();\n//   }\n//   initializeSocketEvents = () => {};\n//   initializePeersEvents = () => {\n//     this.myPeer.on(\"open\", (id) => {\n//       console.log(\"user id send to join room \" + id);\n//       socket.emit(\"join-room\", id);\n//       this.setNavigatorToStream();\n//     });\n//   };\n//   setNavigatorToStream = () => {\n//     navigator.mediaDevices\n//       .getUserMedia({\n//         video: true,\n//         audio: true,\n//       })\n//       .then((stream) => {\n//         if (stream) {\n//           const myVideo = document.getElementById(\"myvideo\");\n//           myVideo.muted = true;\n//           this.addVideoStream(myVideo, stream);\n//           this.setPeersListeners(stream);\n//           this.newUserConnection(stream);\n//         }\n//       });\n//   };\n//   setPeersListeners = (stream) => {\n//     this.myPeer.on(\"call\", (call) => {\n//       console.log(\"someone calling\");\n//       call.answer(stream);\n//       const video = document.createElement(\"video\");\n//       console.log(\"call.peer \" + call.peer);\n//       video.id = call.peer;\n//       call.on(\"stream\", (userVideoStream) => {\n//         this.addVideoStream(video, userVideoStream);\n//       });\n//       call.on(\"close\", () => {\n//         // myVideo.remove();\n//       });\n//     });\n//   };\n//   newUserConnection = (stream) => {\n//     this.socket.on(\"user-connected\", (userId) => {\n//       console.log(\"user id received of new user\" + userId);\n//       this.connectToNewUser(userId, stream, this.myPeer);\n//     });\n//   };\n//   connectToNewUser = (userId, stream, myPeer) => {\n//     console.log(\"connecting to newuser! \");\n//     const call = this.myPeer.call(userId, stream);\n//     call.on(\"error\", (error) => {\n//       console.log(error);\n//     });\n//     // adding peers flush updates\n//     // console.log(\"peers adding \");\n//     // addpeers((prevstate) => ({\n//     //   ...prevstate,\n//     //   [userId]: call,\n//     // }));\n//     // const updatedValue = {};\n//     // updatedValue[userId] = call;\n//     // addpeers({\n//     //   ...peers,\n//     //   ...updatedValue,\n//     // });\n//     // console.log(\"peers \", peers[userId]);\n//     const video = document.createElement(\"video\");\n//     video.id = userId;\n//     console.log(\"cALL \" + call + \"peer \" + myPeer.id);\n//     if (call === null || call === \"\" || call === undefined) console.log(\"null\");\n//     call.on(\"stream\", (userVideoStream) => {\n//       console.log(\"streaming \");\n//       this.addVideoStream(video, userVideoStream);\n//     });\n//     call.on(\"close\", () => {\n//       console.log(\"call closing \");\n//       video.remove();\n//     });\n//     console.log(\"close\");\n//   };\n//   addVideoStream = (video, stream) => {\n//     console.log(\"adding video stream with id \", video.id);\n//     const videoGrid = document.getElementById(\"video-grid\");\n//     video.srcObject = stream;\n//     video.addEventListener(\"loadedmetadata\", () => {\n//       video.play();\n//     });\n//     videoGrid.append(video);\n//     console.log(\":appending\");\n//   };\n//   render() {\n//     return (\n//       <div>\n//         <div id=\"video-grid\">\n//           <p>video chat room</p>\n//           <video id=\"myvideo\" />\n//           <button>pause</button>\n//         </div>\n//       </div>\n//     );\n//   }\n// }","map":{"version":3,"sources":["E:/video_project/client/src/Components/Videochatroom.js"],"names":[],"mappingssourcesContent":["// import React, { useState, useEffect, Component } from \"react\";\r\n// import { io } from \"socket.io-client\";\r\n// import { withRouter } from \"react-router-dom\";\r\n// import Peer from \"peerjs\";\r\n\r\n// const initializePeerConnection = () => {\r\n//   const myPeer = new Peer(undefined, {\r\n//     host: \"/\",\r\n//     port: \"3008\",\r\n//   });\r\n//   return myPeer;\r\n// };\r\n// const initializeSocketConnection = async (props) => {\r\n//   const newsocket = io.connect(\"http://localhost:4000\", {\r\n//     query: {\r\n//       roomId: props,\r\n//     },\r\n//   });\r\n//   return newsocket;\r\n// };\r\n// export default class Videochatroom extends Component {\r\n//   myPeer;\r\n\r\n//   peers;\r\n//   state = {\r\n//     socket: null,\r\n//   };\r\n//   constructor(props) {\r\n//     super(props);\r\n\r\n//     console.log(\"props \" + this.props.roomid);\r\n//     this.myPeer = initializePeerConnection();\r\n//     this.socket = initializeSocketConnection(this.props.roomid);\r\n//     console.log(\"socket \" + this.socket.id);\r\n//     this.initializeSocketEvents();\r\n//     this.initializePeersEvents();\r\n//   }\r\n\r\n//   initializeSocketEvents = () => {};\r\n//   initializePeersEvents = () => {\r\n//     this.myPeer.on(\"open\", (id) => {\r\n//       console.log(\"user id send to join room \" + id);\r\n//       socket.emit(\"join-room\", id);\r\n//       this.setNavigatorToStream();\r\n//     });\r\n//   };\r\n//   setNavigatorToStream = () => {\r\n//     navigator.mediaDevices\r\n//       .getUserMedia({\r\n//         video: true,\r\n//         audio: true,\r\n//       })\r\n//       .then((stream) => {\r\n//         if (stream) {\r\n//           const myVideo = document.getElementById(\"myvideo\");\r\n//           myVideo.muted = true;\r\n//           this.addVideoStream(myVideo, stream);\r\n//           this.setPeersListeners(stream);\r\n//           this.newUserConnection(stream);\r\n//         }\r\n//       });\r\n//   };\r\n\r\n//   setPeersListeners = (stream) => {\r\n//     this.myPeer.on(\"call\", (call) => {\r\n//       console.log(\"someone calling\");\r\n\r\n//       call.answer(stream);\r\n//       const video = document.createElement(\"video\");\r\n//       console.log(\"call.peer \" + call.peer);\r\n//       video.id = call.peer;\r\n\r\n//       call.on(\"stream\", (userVideoStream) => {\r\n//         this.addVideoStream(video, userVideoStream);\r\n//       });\r\n\r\n//       call.on(\"close\", () => {\r\n//         // myVideo.remove();\r\n//       });\r\n//     });\r\n//   };\r\n//   newUserConnection = (stream) => {\r\n//     this.socket.on(\"user-connected\", (userId) => {\r\n//       console.log(\"user id received of new user\" + userId);\r\n\r\n//       this.connectToNewUser(userId, stream, this.myPeer);\r\n//     });\r\n//   };\r\n//   connectToNewUser = (userId, stream, myPeer) => {\r\n//     console.log(\"connecting to newuser! \");\r\n\r\n//     const call = this.myPeer.call(userId, stream);\r\n\r\n//     call.on(\"error\", (error) => {\r\n//       console.log(error);\r\n//     });\r\n//     // adding peers flush updates\r\n//     // console.log(\"peers adding \");\r\n//     // addpeers((prevstate) => ({\r\n//     //   ...prevstate,\r\n//     //   [userId]: call,\r\n//     // }));\r\n\r\n//     // const updatedValue = {};\r\n//     // updatedValue[userId] = call;\r\n//     // addpeers({\r\n//     //   ...peers,\r\n//     //   ...updatedValue,\r\n//     // });\r\n//     // console.log(\"peers \", peers[userId]);\r\n\r\n//     const video = document.createElement(\"video\");\r\n//     video.id = userId;\r\n//     console.log(\"cALL \" + call + \"peer \" + myPeer.id);\r\n//     if (call === null || call === \"\" || call === undefined) console.log(\"null\");\r\n\r\n//     call.on(\"stream\", (userVideoStream) => {\r\n//       console.log(\"streaming \");\r\n//       this.addVideoStream(video, userVideoStream);\r\n//     });\r\n\r\n//     call.on(\"close\", () => {\r\n//       console.log(\"call closing \");\r\n//       video.remove();\r\n//     });\r\n//     console.log(\"close\");\r\n//   };\r\n//   addVideoStream = (video, stream) => {\r\n//     console.log(\"adding video stream with id \", video.id);\r\n\r\n//     const videoGrid = document.getElementById(\"video-grid\");\r\n//     video.srcObject = stream;\r\n//     video.addEventListener(\"loadedmetadata\", () => {\r\n//       video.play();\r\n//     });\r\n//     videoGrid.append(video);\r\n\r\n//     console.log(\":appending\");\r\n//   };\r\n\r\n//   render() {\r\n//     return (\r\n//       <div>\r\n//         <div id=\"video-grid\">\r\n//           <p>video chat room</p>\r\n//           <video id=\"myvideo\" />\r\n//           <button>pause</button>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}