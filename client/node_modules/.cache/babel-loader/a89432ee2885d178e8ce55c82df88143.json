{"ast":null,"code":"var util = require('util');\n\nvar Readable = require('stream').Readable;\n\nvar bind = require('component-bind');\n\nmodule.exports = BlobReadStream;\nutil.inherits(BlobReadStream, Readable);\n/**\n * Readable stream for Blob and File on browser.\n *\n * @param {Object} options\n * @api private\n */\n\nfunction BlobReadStream(blob, options) {\n  if (!(this instanceof BlobReadStream)) {\n    return new BlobReadStream(blob, options);\n  }\n\n  Readable.call(this, options);\n  options = options || {};\n  this.blob = blob;\n  this.slice = blob.slice || blob.webkitSlice || blob.mozSlice;\n  this.start = 0;\n  this.sync = options.synchronous || false;\n  var fileReader;\n\n  if (options.synchronous) {\n    fileReader = this.fileReader = new FileReaderSync();\n  } else {\n    fileReader = this.fileReader = new FileReader();\n  }\n\n  fileReader.onload = bind(this, '_onload');\n  fileReader.onerror = bind(this, '_onerror');\n}\n\nBlobReadStream.prototype._read = function (size) {\n  var start = this.start;\n  var end = this.start = this.start + size;\n  var chunk = this.slice.call(this.blob, start, end);\n\n  if (chunk.size) {\n    if (this.sync) {\n      var bufferChunk = new Buffer(new Uint8Array(this.fileReader.readAsArrayBuffer(chunk)));\n      this.push(bufferChunk);\n    } else {\n      this.fileReader.readAsArrayBuffer(chunk);\n    }\n  } else {\n    this.push(null);\n  }\n};\n\nBlobReadStream.prototype._onload = function (e) {\n  var chunk = new Buffer(new Uint8Array(e.target.result));\n  this.push(chunk);\n};\n\nBlobReadStream.prototype._onerror = function (e) {\n  var err = e.target.error;\n  this.emit('error', err);\n};","map":{"version":3,"sources":["E:/video_project/client/node_modules/socket.io-stream/lib/blob-read-stream.js"],"names":["util","require","Readable","bind","module","exports","BlobReadStream","inherits","blob","options","call","slice","webkitSlice","mozSlice","start","sync","synchronous","fileReader","FileReaderSync","FileReader","onload","onerror","prototype","_read","size","end","chunk","bufferChunk","Buffer","Uint8Array","readAsArrayBuffer","push","_onload","e","target","result","_onerror","err","error","emit"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,QAAD,CAAP,CAAkBC,QAAjC;;AACA,IAAIC,IAAI,GAAGF,OAAO,CAAC,gBAAD,CAAlB;;AAGAG,MAAM,CAACC,OAAP,GAAiBC,cAAjB;AAEAN,IAAI,CAACO,QAAL,CAAcD,cAAd,EAA8BJ,QAA9B;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASI,cAAT,CAAwBE,IAAxB,EAA8BC,OAA9B,EAAuC;AACrC,MAAI,EAAE,gBAAgBH,cAAlB,CAAJ,EAAuC;AACrC,WAAO,IAAIA,cAAJ,CAAmBE,IAAnB,EAAyBC,OAAzB,CAAP;AACD;;AAEDP,EAAAA,QAAQ,CAACQ,IAAT,CAAc,IAAd,EAAoBD,OAApB;AAEAA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,OAAKD,IAAL,GAAYA,IAAZ;AACA,OAAKG,KAAL,GAAaH,IAAI,CAACG,KAAL,IAAcH,IAAI,CAACI,WAAnB,IAAkCJ,IAAI,CAACK,QAApD;AACA,OAAKC,KAAL,GAAa,CAAb;AACA,OAAKC,IAAL,GAAYN,OAAO,CAACO,WAAR,IAAuB,KAAnC;AAEA,MAAIC,UAAJ;;AAEA,MAAIR,OAAO,CAACO,WAAZ,EAAyB;AACvBC,IAAAA,UAAU,GAAG,KAAKA,UAAL,GAAkB,IAAIC,cAAJ,EAA/B;AACD,GAFD,MAEO;AACLD,IAAAA,UAAU,GAAG,KAAKA,UAAL,GAAkB,IAAIE,UAAJ,EAA/B;AACD;;AAEDF,EAAAA,UAAU,CAACG,MAAX,GAAoBjB,IAAI,CAAC,IAAD,EAAO,SAAP,CAAxB;AACAc,EAAAA,UAAU,CAACI,OAAX,GAAqBlB,IAAI,CAAC,IAAD,EAAO,UAAP,CAAzB;AACD;;AAEDG,cAAc,CAACgB,SAAf,CAAyBC,KAAzB,GAAiC,UAASC,IAAT,EAAe;AAC9C,MAAIV,KAAK,GAAG,KAAKA,KAAjB;AACA,MAAIW,GAAG,GAAG,KAAKX,KAAL,GAAa,KAAKA,KAAL,GAAaU,IAApC;AACA,MAAIE,KAAK,GAAG,KAAKf,KAAL,CAAWD,IAAX,CAAgB,KAAKF,IAArB,EAA2BM,KAA3B,EAAkCW,GAAlC,CAAZ;;AAEA,MAAIC,KAAK,CAACF,IAAV,EAAgB;AACd,QAAI,KAAKT,IAAT,EAAe;AACb,UAAIY,WAAW,GAAG,IAAIC,MAAJ,CAAW,IAAIC,UAAJ,CAAe,KAAKZ,UAAL,CAAgBa,iBAAhB,CAAkCJ,KAAlC,CAAf,CAAX,CAAlB;AACA,WAAKK,IAAL,CAAUJ,WAAV;AACD,KAHD,MAGO;AACL,WAAKV,UAAL,CAAgBa,iBAAhB,CAAkCJ,KAAlC;AACD;AACF,GAPD,MAOO;AACL,SAAKK,IAAL,CAAU,IAAV;AACD;AACF,CAfD;;AAiBAzB,cAAc,CAACgB,SAAf,CAAyBU,OAAzB,GAAmC,UAASC,CAAT,EAAY;AAC7C,MAAIP,KAAK,GAAG,IAAIE,MAAJ,CAAW,IAAIC,UAAJ,CAAeI,CAAC,CAACC,MAAF,CAASC,MAAxB,CAAX,CAAZ;AACA,OAAKJ,IAAL,CAAUL,KAAV;AACD,CAHD;;AAKApB,cAAc,CAACgB,SAAf,CAAyBc,QAAzB,GAAoC,UAASH,CAAT,EAAY;AAC9C,MAAII,GAAG,GAAGJ,CAAC,CAACC,MAAF,CAASI,KAAnB;AACA,OAAKC,IAAL,CAAU,OAAV,EAAmBF,GAAnB;AACD,CAHD","sourcesContent":["var util = require('util');\nvar Readable = require('stream').Readable;\nvar bind = require('component-bind');\n\n\nmodule.exports = BlobReadStream;\n\nutil.inherits(BlobReadStream, Readable);\n\n/**\n * Readable stream for Blob and File on browser.\n *\n * @param {Object} options\n * @api private\n */\nfunction BlobReadStream(blob, options) {\n  if (!(this instanceof BlobReadStream)) {\n    return new BlobReadStream(blob, options);\n  }\n\n  Readable.call(this, options);\n\n  options = options || {};\n  this.blob = blob;\n  this.slice = blob.slice || blob.webkitSlice || blob.mozSlice;\n  this.start = 0;\n  this.sync = options.synchronous || false;\n\n  var fileReader;\n\n  if (options.synchronous) {\n    fileReader = this.fileReader = new FileReaderSync();\n  } else {\n    fileReader = this.fileReader = new FileReader();\n  }\n\n  fileReader.onload = bind(this, '_onload');\n  fileReader.onerror = bind(this, '_onerror');\n}\n\nBlobReadStream.prototype._read = function(size) {\n  var start = this.start;\n  var end = this.start = this.start + size;\n  var chunk = this.slice.call(this.blob, start, end);\n\n  if (chunk.size) {\n    if (this.sync) {\n      var bufferChunk = new Buffer(new Uint8Array(this.fileReader.readAsArrayBuffer(chunk)));\n      this.push(bufferChunk);\n    } else {\n      this.fileReader.readAsArrayBuffer(chunk);\n    }\n  } else {\n    this.push(null);\n  }\n}\n\nBlobReadStream.prototype._onload = function(e) {\n  var chunk = new Buffer(new Uint8Array(e.target.result));\n  this.push(chunk);\n};\n\nBlobReadStream.prototype._onerror = function(e) {\n  var err = e.target.error;\n  this.emit('error', err);\n};\n\n"]},"metadata":{},"sourceType":"script"}