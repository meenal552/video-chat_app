{"ast":null,"code":"var _jsxFileName = \"E:\\\\video_project\\\\client\\\\src\\\\Components\\\\Commonroom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Commonroom = props => {\n  _s();\n\n  const [connection, setconnection] = useState(null);\n  let localVideoStream = \"\";\n  useEffect(() => {\n    console.log(\"notsocket \");\n\n    if (props.newsocket) {\n      props.newsocket.on(\"play-video\", data => {\n        if (props.myPeer.id === data.peerid) {\n          data.peers.forEach(peer => {\n            if (peer != props.myPeer.id) {\n              console.log(\"videostream \" + localVideoStream);\n              const video = document.getElementById(\"uploaded-video\");\n              localVideoStream = video.captureStream();\n              props.myPeer.call(peer, localVideoStream);\n            }\n          });\n        }\n      });\n      props.myPeer.on(\"call\", call => {\n        console.log(\"someone calling\");\n        call.answer();\n        const video = document.getElementById(\"uploaded-video\");\n        call.on(\"stream\", userVideoStream => {\n          console.log(\"streaming \");\n          addVideoStream(video, userVideoStream);\n        });\n      }); // console.log(\"found socket \");\n      // props.newsocket.on(\"play-video\", (peerdata) => {\n      //   console.log(\"peerdata \" + peerdata);\n      //   peerdata.forEach((peer) => {\n      // const con = props.myPeer.connect(peer);\n      // con.send(\"hello\");\n      // props.myPeer.on(\"connection\", () => {\n      //   console.log(\"connection\");\n      //   con.on(\"open\", () => {\n      //     console.log(\"open\");\n      //     con.on(\"data\", (data) => {\n      //       console.log(\"video data \" + data);\n      //     });\n      //   });\n      // });\n      // });\n      // });\n    }\n  }, [props]);\n\n  const addVideoStream = (video, stream) => {\n    video.srcObject = stream;\n    video.addEventListener(\"loadedmetadata\", () => {\n      // video.play();\n      const playPromise = video.play();\n\n      if (playPromise !== undefined) {\n        playPromise.then(_ => {\n          // Automatic playback started!\n          // Show playing UI.\n          console.log(\"audio played auto\");\n        }).catch(error => {\n          // Auto-play was prevented\n          // Show paused UI.\n          console.log(\"playback prevented \", error);\n        });\n      }\n    });\n  };\n\n  const startvideo = e => {\n    console.log(\"uploaded\");\n\n    if (e.target.files.length == 0) {\n      console.log(\"empty\");\n    }\n\n    let file = e.target.files[0];\n    const video = document.getElementById(\"uploaded-video\");\n    video.src = URL.createObjectURL(file);\n    let type = file.type;\n\n    if (!video.canPlayType(type)) {\n      alert(\"cannot play that file\");\n      return;\n    }\n\n    video.play().then(() => {\n      if (typeof video.mozCaptureStream == \"function\") {\n        localVideoStream = video.mozCaptureStream();\n      } else if (typeof video.captureStream == \"function\") {\n        localVideoStream = video.captureStream();\n      }\n\n      props.newsocket.emit(\"play-video\", props.myPeer.id);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"video/*'\",\n      onChange: startvideo,\n      id: \"uploaded-file\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      id: \"uploaded-video\",\n      autoPlay: true,\n      controls: true,\n      muted: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Commonroom, \"YFM6rjYzmqx9BaE8s9dMGU8/Iys=\");\n\n_c = Commonroom;\nexport default Commonroom;\n\nvar _c;\n\n$RefreshReg$(_c, \"Commonroom\");","map":{"version":3,"sources":["E:/video_project/client/src/Components/Commonroom.js"],"names":["React","useState","useEffect","Commonroom","props","connection","setconnection","localVideoStream","console","log","newsocket","on","data","myPeer","id","peerid","peers","forEach","peer","video","document","getElementById","captureStream","call","answer","userVideoStream","addVideoStream","stream","srcObject","addEventListener","playPromise","play","undefined","then","_","catch","error","startvideo","e","target","files","length","file","src","URL","createObjectURL","type","canPlayType","alert","mozCaptureStream","emit"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nconst Commonroom = (props) => {\r\n  const [connection, setconnection] = useState(null);\r\n  let localVideoStream = \"\";\r\n  useEffect(() => {\r\n    console.log(\"notsocket \");\r\n    if (props.newsocket) {\r\n      props.newsocket.on(\"play-video\", (data) => {\r\n        if (props.myPeer.id === data.peerid) {\r\n          data.peers.forEach((peer) => {\r\n            if (peer != props.myPeer.id) {\r\n              console.log(\"videostream \" + localVideoStream);\r\n\r\n              const video = document.getElementById(\"uploaded-video\");\r\n              localVideoStream = video.captureStream();\r\n              props.myPeer.call(peer, localVideoStream);\r\n            }\r\n          });\r\n        }\r\n      });\r\n\r\n      props.myPeer.on(\"call\", (call) => {\r\n        console.log(\"someone calling\");\r\n\r\n        call.answer();\r\n        const video = document.getElementById(\"uploaded-video\");\r\n\r\n        call.on(\"stream\", (userVideoStream) => {\r\n          console.log(\"streaming \");\r\n          addVideoStream(video, userVideoStream);\r\n        });\r\n      });\r\n\r\n      // console.log(\"found socket \");\r\n      // props.newsocket.on(\"play-video\", (peerdata) => {\r\n      //   console.log(\"peerdata \" + peerdata);\r\n      //   peerdata.forEach((peer) => {\r\n      // const con = props.myPeer.connect(peer);\r\n      // con.send(\"hello\");\r\n      // props.myPeer.on(\"connection\", () => {\r\n      //   console.log(\"connection\");\r\n      //   con.on(\"open\", () => {\r\n      //     console.log(\"open\");\r\n      //     con.on(\"data\", (data) => {\r\n      //       console.log(\"video data \" + data);\r\n      //     });\r\n      //   });\r\n      // });\r\n      // });\r\n      // });\r\n    }\r\n  }, [props]);\r\n\r\n  const addVideoStream = (video, stream) => {\r\n    video.srcObject = stream;\r\n    video.addEventListener(\"loadedmetadata\", () => {\r\n      // video.play();\r\n\r\n      const playPromise = video.play();\r\n\r\n      if (playPromise !== undefined) {\r\n        playPromise\r\n          .then((_) => {\r\n            // Automatic playback started!\r\n            // Show playing UI.\r\n            console.log(\"audio played auto\");\r\n          })\r\n          .catch((error) => {\r\n            // Auto-play was prevented\r\n            // Show paused UI.\r\n            console.log(\"playback prevented \", error);\r\n          });\r\n      }\r\n    });\r\n  };\r\n  const startvideo = (e) => {\r\n    console.log(\"uploaded\");\r\n    if (e.target.files.length == 0) {\r\n      console.log(\"empty\");\r\n    }\r\n\r\n    let file = e.target.files[0];\r\n    const video = document.getElementById(\"uploaded-video\");\r\n    video.src = URL.createObjectURL(file);\r\n\r\n    let type = file.type;\r\n    if (!video.canPlayType(type)) {\r\n      alert(\"cannot play that file\");\r\n      return;\r\n    }\r\n\r\n    video.play().then(() => {\r\n      if (typeof video.mozCaptureStream == \"function\") {\r\n        localVideoStream = video.mozCaptureStream();\r\n      } else if (typeof video.captureStream == \"function\") {\r\n        localVideoStream = video.captureStream();\r\n      }\r\n\r\n      props.newsocket.emit(\"play-video\", props.myPeer.id);\r\n    });\r\n  };\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"file\"\r\n        accept=\"video/*'\"\r\n        onChange={startvideo}\r\n        id=\"uploaded-file\"\r\n      ></input>\r\n      <video id=\"uploaded-video\" autoPlay controls muted></video>\r\n    </div>\r\n  );\r\n};\r\nexport default Commonroom;\r\n"]},"metadata":{},"sourceType":"module"}