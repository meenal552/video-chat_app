{"ast":null,"code":"var _jsxFileName = \"E:\\\\video_project\\\\client\\\\src\\\\Components\\\\Chatbox.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport ChatMessages from \"./ChatMessages\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Chatbox = props => {\n  _s();\n\n  const [messages, setmessages] = useState([{\n    message: \"hi\",\n    user: \"Server\",\n    timeStamp: Date.now(),\n    key: Date.now()\n  }]);\n  const [temp, settemp] = useState(\"checking\");\n  useEffect(() => {\n    props.socket.on(\"newMessage\", data => {\n      const msgs = messages;\n      msgs.push({\n        message: data.message,\n        user: data.user,\n        timeStamp: data.timeStamp,\n        key: data.timeStamp\n      });\n      console.log(\"mnew msgs\");\n      console.log(msgs);\n      setmessages(msgs);\n      settemp(\"checked\");\n    });\n  }, []);\n\n  const sendMessage = event => {\n    event.preventDefault();\n    const input = document.getElementById(\"chat-input\");\n    const inputValue = input.value;\n    input.value = \"\";\n\n    if (inputValue !== \"\") {\n      console.log(\"mesagesend emitted\");\n      props.socket.emit(\"messageSend\", {\n        message: inputValue,\n        timeStamp: Date.now()\n      });\n    }\n  };\n\n  console.log(\"hello\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbox\",\n    id: \"chatbox\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: \"Chatbox\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"list-wrapper\",\n      id: \"all-messages\",\n      children: [messages.map((message, index) => {\n        console.log(\"happenin \" + messages.length);\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(ChatMessages, {\n            message: message\n          }, Math.random(), false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"what\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true);\n      }), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"list-end\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"chat-form-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: sendMessage,\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \" Write a message....\",\n          id: \"chat-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Chatbox, \"Y6NUc5+K+V4Cq8p8cQR1F/5vk54=\");\n\n_c = Chatbox;\nexport default Chatbox;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chatbox\");","map":{"version":3,"sources":["E:/video_project/client/src/Components/Chatbox.js"],"names":["React","useEffect","useState","ChatMessages","Chatbox","props","messages","setmessages","message","user","timeStamp","Date","now","key","temp","settemp","socket","on","data","msgs","push","console","log","sendMessage","event","preventDefault","input","document","getElementById","inputValue","value","emit","map","index","length","Math","random"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport ChatMessages from \"./ChatMessages\";\r\n\r\nconst Chatbox = (props) => {\r\n  const [messages, setmessages] = useState([\r\n    {\r\n      message: \"hi\",\r\n      user: \"Server\",\r\n      timeStamp: Date.now(),\r\n      key: Date.now(),\r\n    },\r\n  ]);\r\n  const [temp, settemp] = useState(\"checking\");\r\n  useEffect(() => {\r\n    props.socket.on(\"newMessage\", (data) => {\r\n      const msgs = messages;\r\n      msgs.push({\r\n        message: data.message,\r\n        user: data.user,\r\n        timeStamp: data.timeStamp,\r\n        key: data.timeStamp,\r\n      });\r\n      console.log(\"mnew msgs\");\r\n      console.log(msgs);\r\n      setmessages(msgs);\r\n      settemp(\"checked\");\r\n    });\r\n  }, []);\r\n  const sendMessage = (event) => {\r\n    event.preventDefault();\r\n\r\n    const input = document.getElementById(\"chat-input\");\r\n    const inputValue = input.value;\r\n    input.value = \"\";\r\n\r\n    if (inputValue !== \"\") {\r\n      console.log(\"mesagesend emitted\");\r\n      props.socket.emit(\"messageSend\", {\r\n        message: inputValue,\r\n        timeStamp: Date.now(),\r\n      });\r\n    }\r\n  };\r\n  console.log(\"hello\");\r\n  return (\r\n    <div className=\"chatbox\" id=\"chatbox\">\r\n      <div className=\"chat-header\">Chatbox</div>\r\n      <div className=\"list-wrapper\" id=\"all-messages\">\r\n        {/* {messages.map((message) => (\r\n          <ChatMessages key={Math.random()} message={message} />\r\n        ))} */}\r\n        {messages.map((message, index) => {\r\n          console.log(\"happenin \" + messages.length);\r\n          return (\r\n            <>\r\n              <ChatMessages key={Math.random()} message={message} />\r\n              <p>what</p>\r\n            </>\r\n          );\r\n        })}\r\n\r\n        <div className=\"list-end\"></div>\r\n      </div>\r\n\r\n      <div class=\"chat-form-wrapper\">\r\n        <form onSubmit={sendMessage}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\" Write a message....\"\r\n            id=\"chat-input\"\r\n          />\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbox;\r\n"]},"metadata":{},"sourceType":"module"}