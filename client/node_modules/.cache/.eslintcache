[{"E:\\video_project\\client\\src\\index.js":"1","E:\\video_project\\client\\src\\App.js":"2","E:\\video_project\\client\\src\\Components\\RoomNotFound.js":"3","E:\\video_project\\client\\src\\Components\\Roompage.js":"4","E:\\video_project\\client\\src\\Components\\JoinRoom.js":"5","E:\\video_project\\client\\src\\History.js":"6","E:\\video_project\\client\\src\\Components\\Videochatroom.js":"7","E:\\video_project\\client\\src\\Components\\Temproom.js":"8","E:\\video_project\\client\\src\\Components\\Temp3.js":"9","E:\\video_project\\client\\src\\Components\\Commonroom.js":"10","E:\\video_project\\client\\src\\Components\\temp2.js":"11","E:\\video_project\\client\\src\\Components\\Footer.js":"12","E:\\video_project\\client\\src\\Components\\Chatbox.js":"13","E:\\video_project\\client\\src\\Components\\ChatMessages.js":"14"},{"size":432,"mtime":1627381253599,"results":"15","hashOfConfig":"16"},{"size":754,"mtime":1628174620833,"results":"17","hashOfConfig":"16"},{"size":378,"mtime":1620273279843,"results":"18","hashOfConfig":"16"},{"size":1401,"mtime":1627969862122,"results":"19","hashOfConfig":"16"},{"size":4998,"mtime":1629185452698,"results":"20","hashOfConfig":"16"},{"size":91,"mtime":1627378448712,"results":"21","hashOfConfig":"16"},{"size":12272,"mtime":1634148390881,"results":"22","hashOfConfig":"16"},{"size":3259,"mtime":1625997682560,"results":"23","hashOfConfig":"16"},{"size":5620,"mtime":1626412107267,"results":"24","hashOfConfig":"16"},{"size":1972,"mtime":1628330554293,"results":"25","hashOfConfig":"16"},{"size":4170,"mtime":1626847506032,"results":"26","hashOfConfig":"16"},{"size":295,"mtime":1627542273756,"results":"27","hashOfConfig":"16"},{"size":1979,"mtime":1629185035058,"results":"28","hashOfConfig":"16"},{"size":923,"mtime":1628445450938,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1s1r9pg",{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"32"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"32"},"E:\\video_project\\client\\src\\index.js",[],["68","69"],"E:\\video_project\\client\\src\\App.js",["70","71","72"],"import \"./App.css\";\nimport { Component } from \"react\";\n// import { Router } from \"react-router\";\n// import { Route, Switch } from \"react-router-dom\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport Roompage from \"./Components/Roompage\";\nimport RoomNotFound from \"./Components/RoomNotFound\";\nimport JoinRoom from \"./Components/JoinRoom\";\nimport Footer from \"./Components/Footer\";\nimport history from \"./History\";\n\nfunction App() {\n  return (\n    <Router history={history}>\n      <Route path=\"/\" component={Roompage} exact />\n      <Route path=\"/room/:id\" component={JoinRoom} exact />\n      <Route exact path=\"/room-not-found\" component={RoomNotFound} />\n      <Footer />\n    </Router>\n  );\n}\n\nexport default App;\n","E:\\video_project\\client\\src\\Components\\RoomNotFound.js",[],"E:\\video_project\\client\\src\\Components\\Roompage.js",[],"E:\\video_project\\client\\src\\Components\\JoinRoom.js",["73","74","75","76","77","78"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport { io } from \"socket.io-client\";\r\nimport { withRouter } from \"react-router\";\r\nimport Peer from \"peerjs\";\r\n\r\nimport Videochatroom from \"./Videochatroom\";\r\nimport Commonroom from \"./Commonroom\";\r\nimport Chatbox from \"./Chatbox\";\r\n\r\nimport { validate as uuidValidate } from \"uuid\";\r\n\r\nimport history from \"../History\";\r\nimport Temp2 from \"./temp2\";\r\n\r\nconst JoinRoom = (props) => {\r\n  const [videoroom, gotovideoroom] = useState(0);\r\n  const [socket, setSocket] = useState(null);\r\n  // const [mypeer, setmypeer] = useState(\"\");\r\n  const [copied, setcopied] = useState(false);\r\n  const [username, setusername] = useState(null);\r\n  const [chatbox, setchatbox] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // if (!uuidValidate(props.match.params.id)) {\r\n    //   history.push(\"/room-not-found\");\r\n    // }\r\n    const name = localStorage.getItem(\"userName\") || null;\r\n    setusername(name);\r\n    document.getElementById(\"inputname\").value = name;\r\n    if (name) document.getElementById(\"hi\").innerHTML = `Hii  ${name}  !!`;\r\n  }, []);\r\n  const setname = (name) => {\r\n    setusername(name);\r\n    console.log(\"local \" + localStorage.getItem(\"userName\"));\r\n  };\r\n  const setsocket = (socket) => {\r\n    console.log(\"socket set using props\");\r\n    setSocket(socket);\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   const myPeer = new Peer(undefined, {\r\n  //     host: \"/\",\r\n  //     port: \"3008\",\r\n  //   });\r\n\r\n  //   setmypeer(myPeer);\r\n\r\n  //   console.log(props.match.params.id);\r\n  //   console.log(\"mount it using useEffect!\");\r\n\r\n  //   const newsocket = io.connect(\"http://localhost:4000\", {\r\n  //     query: {\r\n  //       roomId: props.match.params.id,\r\n  //     },\r\n  //   });\r\n  //   setSocket(newsocket);\r\n\r\n  //   myPeer.on(\"open\", (id) => {\r\n  //     console.log(\"user id send to join room \" + id);\r\n  //     newsocket.emit(\"add-to-room\", id);\r\n  //   });\r\n  //   return () => {\r\n  //     props.newsocket.emit(\"user-disconnected\", props.myPeer.id);\r\n  //     props.newsocket.removeAllListeners();\r\n\r\n  //     props.myPeer.disconnect();\r\n  //   };\r\n  // }, []);\r\n\r\n  const Joinvideochat = () => {\r\n    console.log(\"props join room \" + props.match.params.id);\r\n    if (username != null) {\r\n      if (videoroom === 0) {\r\n        gotovideoroom(1);\r\n      } else {\r\n        gotovideoroom(0);\r\n      }\r\n    } else {\r\n      alert(\"enter a username \");\r\n    }\r\n  };\r\n  const copyRoomId = () => {\r\n    var tempInput = document.createElement(\"input\");\r\n    tempInput.value = props.match.params.id;\r\n\r\n    document.body.appendChild(tempInput);\r\n    tempInput.select();\r\n    document.execCommand(\"copy\");\r\n    document.body.removeChild(tempInput);\r\n\r\n    setcopied(true);\r\n  };\r\n  const chatsection = () => {\r\n    console.log(\"setfunctionchat\");\r\n    if (chatbox === false) {\r\n      setchatbox(true);\r\n      document.getElementById(\"chatbox\").style.display = \"flex\";\r\n    } else {\r\n      setchatbox(false);\r\n      document.getElementById(\"chatbox\").style.display = \"none\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <header>\r\n        <span id=\"video-btn\">\r\n          {videoroom === 0 ? (\r\n            <button\r\n              onClick={Joinvideochat}\r\n              id=\"video-icon\"\r\n              className=\"icon-btn\"\r\n            >\r\n              <i\r\n                class=\"fa fa-video-camera\"\r\n                style={{ fontSize: \"24px\", color: \"red\" }}\r\n              />\r\n            </button>\r\n          ) : (\r\n            <button\r\n              onClick={Joinvideochat}\r\n              id=\"screen-icon\"\r\n              className=\"icon-btn\"\r\n            >\r\n              <i\r\n                class=\"fa fa-angle-double-left\"\r\n                style={{ fontSize: \"24px\", color: \"yellow\" }}\r\n              />\r\n            </button>\r\n          )}\r\n          <button id=\"comment-icon\" className=\"icon-btn\" onClick={chatsection}>\r\n            <i\r\n              // class=\"fas fa-comment\"\r\n              class=\"fa fa-comment\"\r\n              style={{ fontSize: \"24px\", color: \"darkturquoise\" }}\r\n            />\r\n          </button>\r\n        </span>\r\n        <nav>\r\n          <div\r\n            id=\"roomid\"\r\n            onClick={copyRoomId}\r\n            onMouseOut={(_) => setcopied(false)}\r\n          >\r\n            <ul>\r\n              <span className=\"tooltip\">\r\n                {copied ? \"Copied!\" : \"Copy to clipboard\"}\r\n              </span>\r\n              <li>\r\n                Room ID:<span id=\"id\"> {props.match.params.id}</span>{\" \"}\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </nav>\r\n      </header>\r\n      {socket != null ? <Chatbox socket={socket}></Chatbox> : <></>}\r\n      {/* <Chatbox socket={socket}></Chatbox> */}\r\n\r\n      {/* <button onClick={Joinvideochat}>Join for video chat</button> */}\r\n      {videoroom === 0 ? (\r\n        <Commonroom setname={setname}></Commonroom>\r\n      ) : (\r\n        <Videochatroom setsocket={setsocket}></Videochatroom>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default withRouter(JoinRoom);\r\n","E:\\video_project\\client\\src\\History.js",[],"E:\\video_project\\client\\src\\Components\\Videochatroom.js",["79","80","81","82","83","84","85","86","87","88","89"],"import React, { useState, useEffect } from \"react\";\r\nimport { io } from \"socket.io-client\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport Peer from \"peerjs\";\r\n\r\n//import { validate as uuidValidate } from \"uuid\";\r\n\r\nconst Videochatroom = (props) => {\r\n  // let socketInstance = useRef(null);\r\n\r\n  const [socket, setSocket] = useState(null);\r\n  const [peers, addpeers] = useState({});\r\n  const [mypeerID, setmypeerID] = useState(\"\");\r\n  const [mypeer, setmypeer] = useState(\"\");\r\n  const [mystreams, setmystream] = useState(\"\");\r\n  const [mute, setmute] = useState(true);\r\n  const [video_icon, setvideo_icon] = useState(true);\r\n  const [screenshare_icon, setscreenshare_icon] = useState(false);\r\n  const [username, setusername] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    document.getElementById(\"comment-icon\").style.visibility = \"visible\";\r\n    const myPeer = new Peer(undefined, {\r\n      host: \"/\",\r\n      port: \"3008\",\r\n    });\r\n    setmypeer(myPeer);\r\n    let mystream = \"\";\r\n    //setmypeer(myPeer);\r\n\r\n    console.log(props.match.params.id);\r\n    console.log(\"mount it using useEffect!\");\r\n\r\n    const userName = localStorage.getItem(\"userName\");\r\n    setusername(userName);\r\n    const newsocket = io.connect(\"http://localhost:4000\", {\r\n      query: {\r\n        roomId: props.match.params.id,\r\n        userName,\r\n      },\r\n    });\r\n    console.log(\"socket id \" + newsocket.id);\r\n    setSocket(newsocket);\r\n    props.setsocket(newsocket);\r\n\r\n    myPeer.on(\"open\", (id) => {\r\n      console.log(\"user id send to join room \" + id);\r\n\r\n      setmypeerID(id);\r\n      newsocket.emit(\"join-room\", id);\r\n    });\r\n\r\n    const myVideo = document.getElementById(\"myvideo\");\r\n    myVideo.muted = true;\r\n\r\n    console.log(\"alright now \");\r\n    navigator.mediaDevices\r\n      .getUserMedia({\r\n        video: true,\r\n        audio: true,\r\n      })\r\n      .then((stream) => {\r\n        mystream = stream;\r\n        setmystream(stream);\r\n        addVideoStream(myVideo, stream);\r\n\r\n        newsocket.on(\"user-connected\", (data) => {\r\n          console.log(\"user id received of new user\" + data.id + data.username);\r\n          setTimeout(connectToNewUser, 1000, data, stream, myPeer, newsocket);\r\n          // connectToNewUser(userId, stream, myPeer);\r\n        });\r\n        newsocket.on(\"user-disconnected\", (userId) => {\r\n          console.log(\"userid disconnected \" + userId);\r\n          const disconnectedVideo = document.getElementById(userId);\r\n          const userdiv = document.getElementById(userId + \"a\");\r\n          if (userId) {\r\n            disconnectedVideo.remove();\r\n\r\n            userdiv.remove();\r\n          }\r\n\r\n          if (peers[userId]) peers[userId].close();\r\n        });\r\n        newsocket.on(\"mute-unmute\", (data) => {\r\n          if (data.id != myPeer.id) {\r\n            const peervideo = document.getElementById(data.id);\r\n            if (data.mute) peervideo.muted = true;\r\n            else peervideo.muted = false;\r\n          }\r\n        });\r\n        newsocket.on(\"togglestream\", (peerid) => {\r\n          if (peerid != myPeer.id) {\r\n            console.log(\"togglestream\");\r\n            const peervideo = document.getElementById(peerid);\r\n            const stream = peervideo.srcObject;\r\n            const tracks = stream.getTracks();\r\n            tracks.forEach((track) => {\r\n              if (track.kind == \"video\") {\r\n                track.stop();\r\n              }\r\n            });\r\n          }\r\n        });\r\n\r\n        myPeer.on(\"call\", (call) => {\r\n          console.log(\"someone calling\");\r\n          call.answer(stream);\r\n          const memberid = document.getElementById(call.peer);\r\n          let video = \"\";\r\n          if (memberid != null) {\r\n            console.log(\"member if not null \");\r\n            video = memberid;\r\n            video.muted = true;\r\n            call.on(\"stream\", (stream) => {\r\n              video.srcObject = stream;\r\n              video.play();\r\n            });\r\n            call.on(\"close\", () => {\r\n              console.log(\"call closing\");\r\n              myVideo.remove();\r\n            });\r\n          } else {\r\n            video = document.createElement(\"video\");\r\n            console.log(\"call.peer \" + call.peer);\r\n            video.id = call.peer;\r\n            video.muted = true;\r\n            let receivedusername = \"\";\r\n            newsocket.emit(\"getUsername\", call.peer);\r\n            newsocket.on(\"getUsername\", (data) => {\r\n              receivedusername = data;\r\n              console.log(\"getusername received call \" + receivedusername);\r\n            });\r\n\r\n            call.on(\"stream\", (userVideoStream) => {\r\n              addVideoStream(video, userVideoStream, receivedusername);\r\n            });\r\n\r\n            call.on(\"close\", () => {\r\n              console.log(\"call closing\");\r\n              myVideo.remove();\r\n            });\r\n          }\r\n        });\r\n      });\r\n\r\n    // return works like component will unmount\r\n    return () => {\r\n      newsocket.emit(\"user-disconnected\", myPeer.id);\r\n      newsocket.removeAllListeners();\r\n\r\n      mystream.getTracks().forEach(function (track) {\r\n        if (track.readyState == \"live\") {\r\n          track.stop();\r\n        }\r\n      });\r\n      myPeer.disconnect();\r\n      document.getElementById(\"comment-icon\").style.visibility = \"hidden\";\r\n      document.getElementById(\"chatbox\").style.display = \"none\";\r\n    };\r\n  }, []);\r\n\r\n  const connectToNewUser = async (data, stream, myPeer, socket) => {\r\n    console.log(\"connecting to newuser! \" + data.username);\r\n    // socket.emit(\"getUsername\");\r\n    const call = await myPeer.call(data.id, stream);\r\n\r\n    // adding peers flush updates\r\n    console.log(\"peers adding \");\r\n    addpeers((prevstate) => ({\r\n      ...prevstate,\r\n      [data.id]: call,\r\n    }));\r\n\r\n    const video = document.createElement(\"video\");\r\n    video.id = data.id;\r\n    video.className = \"peer-videos\";\r\n    video.muted = true;\r\n    console.log(\"cALL \" + call + \"peer \" + myPeer.id);\r\n    if (call === null || call === \"\" || call === undefined) console.log(\"null\");\r\n\r\n    await call.on(\"stream\", (userVideoStream) => {\r\n      console.log(\"streaming \");\r\n      addVideoStream(video, userVideoStream, data.username);\r\n    });\r\n  };\r\n\r\n  const addVideoStream = async (video, stream, username = \"\") => {\r\n    console.log(\"adding video stream with id \", video.id);\r\n    let div;\r\n\r\n    const videoGrid = document.getElementById(\"video-grid\");\r\n\r\n    video.srcObject = stream;\r\n    await video.addEventListener(\"loadedmetadata\", () => {\r\n      if (video.id != \"myvideo\") {\r\n        div = document.createElement(\"div\");\r\n        div.className = \"self-video\";\r\n        div.id = video.id + \"a\";\r\n        div.append(video);\r\n\r\n        const span = document.createElement(\"span\");\r\n        const fullscreen = document.createElement(\"button\");\r\n        span.className = \"username\";\r\n        span.innerHTML = username;\r\n        fullscreen.innerHTML = \"[ ]\";\r\n        fullscreen.className = \"share-btn\";\r\n        fullscreen.addEventListener(\"click\", () => {\r\n          // video.requestFullscreen();\r\n\r\n          video.classList.toggle(\"fullscreen\");\r\n        });\r\n        span.append(fullscreen);\r\n        div.append(span);\r\n      }\r\n      video.play();\r\n      if (video.id === \"myvideo\") {\r\n      } else {\r\n        div.className = \"notself-video\";\r\n        const x = document.getElementById(video.id + \"a\");\r\n        if (x != null) {\r\n          console.log(\"removing div\");\r\n          x.remove();\r\n        }\r\n        videoGrid.append(div);\r\n      }\r\n    });\r\n\r\n    console.log(\":appending\");\r\n  };\r\n\r\n  const muteunmute = () => {\r\n    const v = document.getElementById(\"myvideo\");\r\n    const data = {\r\n      id: mypeerID,\r\n    };\r\n    if (v.muted) {\r\n      v.muted = false;\r\n      data.mute = false;\r\n      setmute(false);\r\n    } else {\r\n      v.muted = true;\r\n      data.mute = true;\r\n      setmute(true);\r\n    }\r\n    console.log(\"mute \" + mypeerID);\r\n\r\n    socket.emit(\"mute-unmute\", data);\r\n  };\r\n  const togglestream = () => {\r\n    console.log(\"video icon value \" + video_icon);\r\n    const myvideo = document.getElementById(\"myvideo\");\r\n    mystreams.getTracks().forEach((track) => {\r\n      if (track.kind === \"video\") {\r\n        if (track.readyState == \"live\") {\r\n          console.log(\":true \");\r\n          track.stop();\r\n          setvideo_icon(false);\r\n          myvideo.src = \"\";\r\n          myvideo.srcObject = null;\r\n          socket.emit(\"togglestream\", mypeerID);\r\n        } else {\r\n          console.log(\":false\");\r\n          navigator.mediaDevices\r\n            .getUserMedia({\r\n              video: true,\r\n              audio: true,\r\n            })\r\n            .then((stream) => {\r\n              setmystream(stream);\r\n              const video = document.getElementById(\"myvideo\");\r\n              video.srcObject = stream;\r\n              video.addEventListener(\"loadedmetadata\", () => {\r\n                video.play();\r\n              });\r\n              socket.emit(\"getPeers\");\r\n              socket.on(\"getPeers\", (peers) => {\r\n                peers.forEach((peer) => {\r\n                  mypeer.call(peer, stream);\r\n                });\r\n              });\r\n            });\r\n          setvideo_icon(true);\r\n        }\r\n      }\r\n    });\r\n  };\r\n  const screenshare = () => {\r\n    const myvideo = document.getElementById(\"myvideo\");\r\n    if (video_icon == true || screenshare_icon == true) {\r\n      mystreams.getTracks().forEach((track) => {\r\n        if (track.kind === \"video\") {\r\n          if (track.readyState == \"live\") {\r\n            console.log(\":true \");\r\n            track.stop();\r\n            setvideo_icon(false);\r\n            myvideo.src = \"\";\r\n            myvideo.srcObject = null;\r\n            socket.emit(\"togglestream\", mypeerID);\r\n          }\r\n        }\r\n      });\r\n    }\r\n    if (screenshare_icon == false) {\r\n      navigator.mediaDevices\r\n        .getDisplayMedia({\r\n          video: true,\r\n        })\r\n        .then((stream) => {\r\n          setmystream(stream);\r\n          setscreenshare_icon(true);\r\n          const video = document.getElementById(\"myvideo\");\r\n          video.srcObject = stream;\r\n          socket.emit(\"getPeers\");\r\n          socket.on(\"getPeers\", (peers) => {\r\n            peers.forEach((peer) => {\r\n              mypeer.call(peer, stream);\r\n            });\r\n          });\r\n        });\r\n    } else {\r\n      setscreenshare_icon(false);\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <h2>PEERS</h2>\r\n      <div className=\"video-main\">\r\n        <div class=\"self-video\">\r\n          <video id=\"myvideo\" />\r\n\r\n          {mute === true ? (\r\n            <button\r\n              onClick={muteunmute}\r\n              id=\"mute-icon\"\r\n              className=\"video_chat_icons\"\r\n            >\r\n              <i\r\n                class=\"fas fa-microphone-slash\"\r\n                style={{ fontSize: \"24px\", color: \"red\" }}\r\n              />\r\n            </button>\r\n          ) : (\r\n            <button\r\n              onClick={muteunmute}\r\n              id=\"unmute-icon\"\r\n              className=\"video_chat_icons\"\r\n            >\r\n              <i\r\n                class=\"fas fa-microphone\"\r\n                style={{ fontSize: \"24px\", color: \"red\" }}\r\n              />\r\n            </button>\r\n          )}\r\n          {video_icon === true ? (\r\n            <button\r\n              onClick={togglestream}\r\n              id=\"mute-icon\"\r\n              className=\"video_chat_icons\"\r\n            >\r\n              <i\r\n                class=\"fa fa-video\"\r\n                style={{ fontSize: \"24px\", color: \"red\" }}\r\n              />\r\n            </button>\r\n          ) : (\r\n            <button\r\n              onClick={togglestream}\r\n              id=\"unmute-icon\"\r\n              className=\"video_chat_icons\"\r\n            >\r\n              <i\r\n                class=\"fa fa-video-slash\"\r\n                style={{ fontSize: \"24px\", color: \"red\" }}\r\n              />\r\n            </button>\r\n          )}\r\n          <button\r\n            onClick={screenshare}\r\n            id=\"screen-icon\"\r\n            className=\"video_chat_icons\"\r\n          >\r\n            <i class=\"fa fa-tv\" style={{ fontSize: \"24px\", color: \"red\" }} />\r\n          </button>\r\n          <span className=\"username\">{username}</span>\r\n        </div>\r\n\r\n        <div id=\"video-grid\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default withRouter(Videochatroom);\r\n","E:\\video_project\\client\\src\\Components\\Temproom.js",["90","91"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport Peer from \"peerjs\";\r\n\r\n// const Container = styled.div`\r\n//   padding: 20px;\r\n//   display: flex;\r\n//   height: 100vh;\r\n//   width: 90%;\r\n//   margin: auto;\r\n//   flex-wrap: wrap;\r\n// `;\r\n\r\n// const StyledVideo = styled.video`\r\n//   height: 40%;\r\n//   width: 50%;\r\n// `;\r\n\r\nconst Video = (props) => {\r\n  const ref = useRef();\r\n  console.log(\"called h \");\r\n  useEffect(() => {\r\n    props.peer.on(\"stream\", (stream) => {\r\n      ref.current.srcObject = stream;\r\n    });\r\n  }, []);\r\n  console.log(\"called \");\r\n  return <video ref={ref} />;\r\n};\r\n\r\nconst videoConstraints = {\r\n  height: window.innerHeight / 2,\r\n  width: window.innerWidth / 2,\r\n};\r\n\r\nconst Room = (props) => {\r\n  const [peers, setPeers] = useState([]);\r\n  const socketRef = useRef();\r\n  const userVideo = useRef();\r\n  const peersRef = useRef([]);\r\n  const roomID = props.match.params.id;\r\n\r\n  useEffect(() => {\r\n    socketRef.current = io.connect(\"/\");\r\n    navigator.mediaDevices\r\n      .getUserMedia({ video: videoConstraints, audio: true })\r\n      .then((stream) => {\r\n        userVideo.current.srcObject = stream;\r\n        socketRef.current.emit(\"join room\", roomID);\r\n        socketRef.current.on(\"all users\", (users) => {\r\n          const peers = [];\r\n          users.forEach((userID) => {\r\n            const peer = createPeer(userID, socketRef.current.id, stream);\r\n            peersRef.current.push({\r\n              peerID: userID,\r\n              peer,\r\n            });\r\n            peers.push(peer);\r\n          });\r\n          setPeers(peers);\r\n        });\r\n\r\n        socketRef.current.on(\"user joined\", (payload) => {\r\n          console.log(\"user joined\");\r\n          const peer = addPeer(payload.signal, payload.callerID, stream);\r\n          peersRef.current.push({\r\n            peerID: payload.callerID,\r\n            peer,\r\n          });\r\n\r\n          setPeers((users) => [...users, peer]);\r\n        });\r\n\r\n        socketRef.current.on(\"receiving returned signal\", (payload) => {\r\n          const item = peersRef.current.find((p) => p.peerID === payload.id);\r\n          item.peer.signal(payload.signal);\r\n        });\r\n      });\r\n  }, []);\r\n\r\n  function createPeer(userToSignal, callerID, stream) {\r\n    const peer = new Peer({\r\n      initiator: true,\r\n      trickle: false,\r\n      stream,\r\n    });\r\n\r\n    peer.on(\"signal\", (signal) => {\r\n      socketRef.current.emit(\"sending signal\", {\r\n        userToSignal,\r\n        callerID,\r\n        signal,\r\n      });\r\n    });\r\n\r\n    return peer;\r\n  }\r\n\r\n  function addPeer(incomingSignal, callerID, stream) {\r\n    const peer = new Peer({\r\n      initiator: false,\r\n      trickle: false,\r\n      stream,\r\n    });\r\n\r\n    peer.on(\"signal\", (signal) => {\r\n      socketRef.current.emit(\"returning signal\", { signal, callerID });\r\n    });\r\n\r\n    peer.signal(incomingSignal);\r\n\r\n    return peer;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <video muted ref={userVideo} autoPlay playsInline />\r\n      {peers.map((peer, index) => {\r\n        return (\r\n          <div>\r\n            <Video key={index} peer={peer} />\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Room);\r\n",["92","93"],"E:\\video_project\\client\\src\\Components\\Temp3.js",["94","95"],"E:\\video_project\\client\\src\\Components\\Commonroom.js",["96"],"import React, { useState } from \"react\";\r\n\r\nexport default function Commonroom(props) {\r\n  const [username, setusername] = useState(null);\r\n  // const startvideo = (e) => {\r\n  //   console.log(\"uploaded\");\r\n  //   if (e.target.files.length == 0) {\r\n  //     console.log(\"empty\");\r\n  //   }\r\n\r\n  //   let file = e.target.files[0];\r\n  //   const video = document.getElementById(\"uploaded-video\");\r\n  //   video.src = URL.createObjectURL(file);\r\n\r\n  //   let type = file.type;\r\n  //   if (!video.canPlayType(type)) {\r\n  //     alert(\"cannot play that file\");\r\n  //     return;\r\n  //   }\r\n\r\n  //   video.play().then(() => {\r\n  //     if (typeof video.mozCaptureStream == \"function\") {\r\n  //       window.localVideoStream = video.mozCaptureStream();\r\n  //     } else if (typeof video.captureStream == \"function\") {\r\n  //       window.localVideoStream = video.captureStream();\r\n  //     }\r\n  //   });\r\n  // };\r\n  const handlechange = (e) => {\r\n    const username = e.target.value;\r\n    if (username.length > 0) {\r\n      localStorage.setItem(\"userName\", username);\r\n      setusername(username);\r\n    }\r\n  };\r\n  const handlesubmit = (e) => {\r\n    e.preventDefault();\r\n    if (username === null) {\r\n      alert(\"enter a valid name\");\r\n    } else {\r\n      document.getElementById(\"hi\").innerHTML = `Hii  ${username}  !!`;\r\n      props.setname(username);\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"common-room\">\r\n      <form onSubmit={handlesubmit}>\r\n        <label>Enter Name</label>\r\n        <input\r\n          id=\"inputname\"\r\n          type=\"text\"\r\n          placeholder=\"Enter your name\"\r\n          onChange={handlechange}\r\n        />\r\n\r\n        <input type=\"submit\" class=\"submit\" value=\"Use Name\"></input>\r\n      </form>\r\n      <h4 id=\"hi\"></h4>\r\n      {/* <input\r\n        type=\"file\"\r\n        accept=\"video/*'\"\r\n        onChange={startvideo}\r\n        id=\"uploaded-file\"\r\n      ></input>\r\n      <video id=\"uploaded-video\" autoPlay controls></video> */}\r\n    </div>\r\n  );\r\n}\r\n","E:\\video_project\\client\\src\\Components\\temp2.js",["97","98","99","100"],"import React, { useState, useEffect, Component } from \"react\";\r\nimport { io } from \"socket.io-client\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport Peer from \"peerjs\";\r\n\r\nconst initializePeerConnection = () => {\r\n  const myPeer = new Peer(undefined, {\r\n    host: \"/\",\r\n    port: \"3008\",\r\n  });\r\n  return myPeer;\r\n};\r\nconst initializeSocketConnection = async (props) => {\r\n  const socket = await io.connect(\"http://localhost:4000\", {\r\n    query: {\r\n      roomId: props,\r\n    },\r\n  });\r\n  socket.on(\"connect\", () => {\r\n    console.log(\"socket connected\");\r\n  });\r\n  return socket;\r\n};\r\nexport default class Videochatroom extends Component {\r\n  myPeer;\r\n  socket;\r\n  peers;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    console.log(\"props \" + this.props.roomid);\r\n    const socket = io.connect(\"http://localhost:4000\", {\r\n      query: {\r\n        roomId: this.props.roomid,\r\n      },\r\n    });\r\n    this.myPeer = initializePeerConnection();\r\n    //const newsocket = initializeSocketConnection(this.props.roomid);\r\n    // this.initializeSocketEvents();\r\n    this.initializePeersEvents(socket);\r\n  }\r\n\r\n  initializePeersEvents = (socket) => {\r\n    this.myPeer.on(\"open\", (id) => {\r\n      console.log(\"user id send to join room \" + id);\r\n      socket.emit(\"join-room\", id);\r\n      this.setNavigatorToStream(socket);\r\n    });\r\n  };\r\n  setNavigatorToStream = (socket) => {\r\n    navigator.mediaDevices\r\n      .getUserMedia({\r\n        video: true,\r\n        audio: true,\r\n      })\r\n      .then((stream) => {\r\n        if (stream) {\r\n          const myVideo = document.getElementById(\"myvideo\");\r\n          myVideo.muted = true;\r\n          this.addVideoStream(myVideo, stream);\r\n          this.setPeersListeners(stream);\r\n          this.newUserConnection(stream, socket);\r\n        }\r\n      });\r\n  };\r\n\r\n  setPeersListeners = (stream) => {\r\n    this.myPeer.on(\"call\", (call) => {\r\n      console.log(\"someone calling\");\r\n\r\n      call.answer(stream);\r\n      const video = document.createElement(\"video\");\r\n      console.log(\"call.peer \" + call.peer);\r\n      video.id = call.peer;\r\n\r\n      call.on(\"stream\", (userVideoStream) => {\r\n        this.addVideoStream(video, userVideoStream);\r\n      });\r\n\r\n      call.on(\"close\", () => {\r\n        // myVideo.remove();\r\n      });\r\n    });\r\n  };\r\n  newUserConnection = (stream, socket) => {\r\n    socket.on(\"user-connected\", (userId) => {\r\n      console.log(\"user id received of new user\" + userId);\r\n\r\n      this.connectToNewUser(userId, stream, this.myPeer);\r\n    });\r\n  };\r\n  connectToNewUser = (userId, stream, myPeer) => {\r\n    console.log(\"connecting to newuser! \");\r\n\r\n    const call = this.myPeer.call(userId, stream);\r\n\r\n    call.on(\"error\", (error) => {\r\n      console.log(error);\r\n    });\r\n    // adding peers flush updates\r\n    // console.log(\"peers adding \");\r\n    // addpeers((prevstate) => ({\r\n    //   ...prevstate,\r\n    //   [userId]: call,\r\n    // }));\r\n\r\n    // const updatedValue = {};\r\n    // updatedValue[userId] = call;\r\n    // addpeers({\r\n    //   ...peers,\r\n    //   ...updatedValue,\r\n    // });\r\n    // console.log(\"peers \", peers[userId]);\r\n\r\n    const video = document.createElement(\"video\");\r\n    video.id = userId;\r\n    console.log(\"cALL \" + call + \"peer \" + myPeer.id);\r\n    if (call === null || call === \"\" || call === undefined) console.log(\"null\");\r\n\r\n    call.on(\"stream\", (userVideoStream) => {\r\n      console.log(\"streaming \");\r\n      this.addVideoStream(video, userVideoStream);\r\n    });\r\n\r\n    call.on(\"close\", () => {\r\n      console.log(\"call closing \");\r\n      video.remove();\r\n    });\r\n    console.log(\"close\");\r\n  };\r\n  addVideoStream = (video, stream) => {\r\n    console.log(\"adding video stream with id \", video.id);\r\n\r\n    const videoGrid = document.getElementById(\"video-grid\");\r\n    video.srcObject = stream;\r\n    video.addEventListener(\"loadedmetadata\", () => {\r\n      video.play();\r\n    });\r\n    videoGrid.append(video);\r\n\r\n    console.log(\":appending\");\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div id=\"video-grid\">\r\n          <p>video chat room</p>\r\n          <video id=\"myvideo\" />\r\n          <button>pause</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","E:\\video_project\\client\\src\\Components\\Footer.js",[],"E:\\video_project\\client\\src\\Components\\Chatbox.js",["101","102"],"import React, { useEffect, useState } from \"react\";\r\nimport ChatMessages from \"./ChatMessages\";\r\n\r\nconst Chatbox = (props) => {\r\n  const [messages, setmessages] = useState([\r\n    {\r\n      message: \"Welcome!\",\r\n      user: \"Server\",\r\n      timeStamp: Date.now(),\r\n    },\r\n  ]);\r\n  const [temp, settemp] = useState(\"checking\");\r\n  useEffect(() => {\r\n    props.socket.on(\"newMessage\", (data) => {\r\n      const msgs = messages;\r\n      msgs.push({\r\n        message: data.message,\r\n        user: data.user,\r\n        timeStamp: data.timeStamp,\r\n      });\r\n      console.log(\"mnew msgs\");\r\n      console.log(msgs);\r\n      setmessages(msgs);\r\n      settemp(\"checked\");\r\n    });\r\n  }, []);\r\n  const sendMessage = (event) => {\r\n    event.preventDefault();\r\n\r\n    const input = document.getElementById(\"chat-input\");\r\n    const inputValue = input.value;\r\n    input.value = \"\";\r\n\r\n    if (inputValue !== \"\") {\r\n      console.log(\"mesagesend emitted\");\r\n      props.socket.emit(\"messageSend\", {\r\n        message: inputValue,\r\n        timeStamp: Date.now(),\r\n      });\r\n    }\r\n  };\r\n  console.log(\"hello\");\r\n  return (\r\n    <div className=\"chatbox\" id=\"chatbox\">\r\n      <div className=\"chat-header\">Chatbox</div>\r\n      <div className=\"list-wrapper\" id=\"all-messages\">\r\n        {/* {messages.map((message) => (\r\n          <ChatMessages key={Math.random()} message={message} />\r\n        ))} */}\r\n        {messages.map((message) => {\r\n          console.log(\"happenin \" + messages.length);\r\n          return (\r\n            <>\r\n              <ChatMessages key={message.timeStamp} message={message} />\r\n            </>\r\n          );\r\n        })}\r\n\r\n        <div className=\"list-end\"></div>\r\n      </div>\r\n\r\n      <div class=\"chat-form-wrapper\">\r\n        <form onSubmit={sendMessage}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\" Write a message....\"\r\n            id=\"chat-input\"\r\n          />\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbox;\r\n","E:\\video_project\\client\\src\\Components\\ChatMessages.js",["103"],"import React, { useEffect } from \"react\";\r\n\r\nconst ChatMessages = (props) => {\r\n  const convertTime = (timeStamp) => {\r\n    const date = new Date(timeStamp);\r\n\r\n    let hours = date.getHours();\r\n    let ampm = hours < 12 ? \"AM\" : \"PM\";\r\n    hours = hours % 12;\r\n    if (hours === 0) hours = 12;\r\n\r\n    let minutes = date.getMinutes();\r\n    if (minutes < 10) minutes = \"0\" + minutes;\r\n\r\n    let timeString = hours + \":\" + minutes + \" \" + ampm;\r\n    return timeString;\r\n  };\r\n  const message = props.message;\r\n  console.log(\"inside chatmessages\");\r\n  return (\r\n    <div id=\"chat-card-wrapper\" key={Math.random()}>\r\n      <div id=\"message-card-header\">\r\n        <div id=\"messenger-name\">{message.user}</div>\r\n\r\n        <div id=\"message-time\">{convertTime(message.timeStamp)}</div>\r\n      </div>\r\n\r\n      <div id=\"message\">\r\n        <p>{message.message}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatMessages;\r\n",{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":2,"column":10,"nodeType":"110","messageId":"111","endLine":2,"endColumn":19},{"ruleId":"108","severity":1,"message":"112","line":5,"column":35,"nodeType":"110","messageId":"111","endLine":5,"endColumn":41},{"ruleId":"108","severity":1,"message":"113","line":5,"column":50,"nodeType":"110","messageId":"111","endLine":5,"endColumn":54},{"ruleId":"108","severity":1,"message":"114","line":1,"column":38,"nodeType":"110","messageId":"111","endLine":1,"endColumn":44},{"ruleId":"108","severity":1,"message":"115","line":2,"column":10,"nodeType":"110","messageId":"111","endLine":2,"endColumn":12},{"ruleId":"108","severity":1,"message":"116","line":4,"column":8,"nodeType":"110","messageId":"111","endLine":4,"endColumn":12},{"ruleId":"108","severity":1,"message":"117","line":10,"column":22,"nodeType":"110","messageId":"111","endLine":10,"endColumn":34},{"ruleId":"108","severity":1,"message":"118","line":12,"column":8,"nodeType":"110","messageId":"111","endLine":12,"endColumn":15},{"ruleId":"108","severity":1,"message":"119","line":13,"column":8,"nodeType":"110","messageId":"111","endLine":13,"endColumn":13},{"ruleId":"120","severity":1,"message":"121","line":85,"column":23,"nodeType":"122","messageId":"123","endLine":85,"endColumn":25},{"ruleId":"120","severity":1,"message":"121","line":92,"column":22,"nodeType":"122","messageId":"123","endLine":92,"endColumn":24},{"ruleId":"120","severity":1,"message":"124","line":98,"column":30,"nodeType":"122","messageId":"123","endLine":98,"endColumn":32},{"ruleId":"120","severity":1,"message":"124","line":152,"column":30,"nodeType":"122","messageId":"123","endLine":152,"endColumn":32},{"ruleId":"125","severity":1,"message":"126","line":160,"column":6,"nodeType":"127","endLine":160,"endColumn":8,"suggestions":"128"},{"ruleId":"120","severity":1,"message":"121","line":195,"column":20,"nodeType":"122","messageId":"123","endLine":195,"endColumn":22},{"ruleId":"120","severity":1,"message":"124","line":254,"column":30,"nodeType":"122","messageId":"123","endLine":254,"endColumn":32},{"ruleId":"120","severity":1,"message":"124","line":289,"column":20,"nodeType":"122","messageId":"123","endLine":289,"endColumn":22},{"ruleId":"120","severity":1,"message":"124","line":289,"column":48,"nodeType":"122","messageId":"123","endLine":289,"endColumn":50},{"ruleId":"120","severity":1,"message":"124","line":292,"column":32,"nodeType":"122","messageId":"123","endLine":292,"endColumn":34},{"ruleId":"120","severity":1,"message":"124","line":303,"column":26,"nodeType":"122","messageId":"123","endLine":303,"endColumn":28},{"ruleId":"125","severity":1,"message":"129","line":27,"column":6,"nodeType":"127","endLine":27,"endColumn":8,"suggestions":"130"},{"ruleId":"125","severity":1,"message":"131","line":80,"column":6,"nodeType":"127","endLine":80,"endColumn":8,"suggestions":"132"},{"ruleId":"104","replacedBy":"133"},{"ruleId":"106","replacedBy":"134"},{"ruleId":"108","severity":1,"message":"135","line":1,"column":8,"nodeType":"110","messageId":"111","endLine":1,"endColumn":13},{"ruleId":"108","severity":1,"message":"109","line":1,"column":17,"nodeType":"110","messageId":"111","endLine":1,"endColumn":26},{"ruleId":"136","severity":1,"message":"137","line":58,"column":7,"nodeType":"138","endLine":58,"endColumn":19},{"ruleId":"108","severity":1,"message":"139","line":1,"column":17,"nodeType":"110","messageId":"111","endLine":1,"endColumn":25},{"ruleId":"108","severity":1,"message":"140","line":1,"column":27,"nodeType":"110","messageId":"111","endLine":1,"endColumn":36},{"ruleId":"108","severity":1,"message":"141","line":3,"column":10,"nodeType":"110","messageId":"111","endLine":3,"endColumn":20},{"ruleId":"108","severity":1,"message":"142","line":13,"column":7,"nodeType":"110","messageId":"111","endLine":13,"endColumn":33},{"ruleId":"108","severity":1,"message":"143","line":12,"column":10,"nodeType":"110","messageId":"111","endLine":12,"endColumn":14},{"ruleId":"125","severity":1,"message":"144","line":26,"column":6,"nodeType":"127","endLine":26,"endColumn":8,"suggestions":"145"},{"ruleId":"108","severity":1,"message":"140","line":1,"column":17,"nodeType":"110","messageId":"111","endLine":1,"endColumn":26},"no-native-reassign",["146"],"no-negated-in-lhs",["147"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","'Link' is defined but never used.","'useRef' is defined but never used.","'io' is defined but never used.","'Peer' is defined but never used.","'uuidValidate' is defined but never used.","'history' is defined but never used.","'Temp2' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'connectToNewUser', 'peers', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["148"],"React Hook useEffect has a missing dependency: 'props.peer'. Either include it or remove the dependency array.",["149"],"React Hook useEffect has a missing dependency: 'roomID'. Either include it or remove the dependency array.",["150"],["146"],["147"],"'React' is defined but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","'useState' is defined but never used.","'useEffect' is defined but never used.","'withRouter' is defined but never used.","'initializeSocketConnection' is assigned a value but never used.","'temp' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'messages' and 'props.socket'. Either include them or remove the dependency array.",["151"],"no-global-assign","no-unsafe-negation",{"desc":"152","fix":"153"},{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},"Update the dependencies array to be: [connectToNewUser, peers, props]",{"range":"160","text":"161"},"Update the dependencies array to be: [props.peer]",{"range":"162","text":"163"},"Update the dependencies array to be: [roomID]",{"range":"164","text":"165"},"Update the dependencies array to be: [messages, props.socket]",{"range":"166","text":"167"},[5337,5339],"[connectToNewUser, peers, props]",[625,627],"[props.peer]",[2257,2259],"[roomID]",[675,677],"[messages, props.socket]"]